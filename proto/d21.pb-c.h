/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: d21.proto */

#ifndef PROTOBUF_C_d21_2eproto__INCLUDED
#define PROTOBUF_C_d21_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1001001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct _Pb__TxBeginRequest Pb__TxBeginRequest;
typedef struct _Pb__TxBeginResponse Pb__TxBeginResponse;
typedef struct _Pb__TxCommitRequest Pb__TxCommitRequest;
typedef struct _Pb__TxCommitResponse Pb__TxCommitResponse;
typedef struct _Pb__TxRollbackRequest Pb__TxRollbackRequest;
typedef struct _Pb__TxRollbackResponse Pb__TxRollbackResponse;
typedef struct _Pb__Request Pb__Request;
typedef struct _Pb__TxRequest Pb__TxRequest;
typedef struct _Pb__TxResponse Pb__TxResponse;
typedef struct _Pb__ControlTypeString Pb__ControlTypeString;
typedef struct _Pb__Entry Pb__Entry;
typedef struct _Pb__EntryAttribute Pb__EntryAttribute;
typedef struct _Pb__Response Pb__Response;
typedef struct _Pb__Metadata Pb__Metadata;


/* --- enums --- */

/*
 * LDAP Search scope
 */
typedef enum _Pb__SearchScope {
  PB__SEARCH_SCOPE__BaseObject = 0,
  PB__SEARCH_SCOPE__SingleLevel = 1,
  PB__SEARCH_SCOPE__Subtree = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PB__SEARCH_SCOPE)
} Pb__SearchScope;
typedef enum _Pb__RESTMethod {
  PB__RESTMETHOD__UNKNOWN = 0,
  PB__RESTMETHOD__GET = 1,
  PB__RESTMETHOD__PUT = 2,
  PB__RESTMETHOD__POST = 3,
  PB__RESTMETHOD__DELETE = 4,
  PB__RESTMETHOD__SYNC = 5,
  PB__RESTMETHOD__QGET = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PB__RESTMETHOD)
} Pb__RESTMethod;
typedef enum _Pb__EntryMethod {
  PB__ENTRY_METHOD__Unknown = 0,
  PB__ENTRY_METHOD__Add = 1,
  PB__ENTRY_METHOD__Replace = 2,
  PB__ENTRY_METHOD__Delete = 3,
  PB__ENTRY_METHOD__Increase = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PB__ENTRY_METHOD)
} Pb__EntryMethod;
typedef enum _Pb__TxMethod {
  PB__TX_METHOD__TXUNKNOWN = 0,
  PB__TX_METHOD__TXBEGIN = 1,
  PB__TX_METHOD__TXDO = 2,
  PB__TX_METHOD__TXCOMMIT = 3,
  PB__TX_METHOD__TXROLLBACK = 4,
  PB__TX_METHOD__TXUNDO = 5,
  PB__TX_METHOD__TXLOCK = 6,
  PB__TX_METHOD__TXSTORE = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(PB__TX_METHOD)
} Pb__TxMethod;

/* --- messages --- */

struct  _Pb__TxBeginRequest
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  uint64_t id;
};
#define PB__TX_BEGIN_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pb__tx_begin_request__descriptor) \
    , 0,0 }


struct  _Pb__TxBeginResponse
{
  ProtobufCMessage base;
  protobuf_c_boolean has_tid;
  uint64_t tid;
  Pb__Metadata *metadata;
  protobuf_c_boolean has_id;
  uint64_t id;
};
#define PB__TX_BEGIN_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pb__tx_begin_response__descriptor) \
    , 0,0, NULL, 0,0 }


struct  _Pb__TxCommitRequest
{
  ProtobufCMessage base;
  protobuf_c_boolean has_tid;
  uint64_t tid;
  protobuf_c_boolean has_id;
  uint64_t id;
};
#define PB__TX_COMMIT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pb__tx_commit_request__descriptor) \
    , 0,0, 0,0 }


struct  _Pb__TxCommitResponse
{
  ProtobufCMessage base;
  protobuf_c_boolean has_tid;
  uint64_t tid;
  Pb__Metadata *metadata;
  protobuf_c_boolean has_id;
  uint64_t id;
};
#define PB__TX_COMMIT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pb__tx_commit_response__descriptor) \
    , 0,0, NULL, 0,0 }


struct  _Pb__TxRollbackRequest
{
  ProtobufCMessage base;
  protobuf_c_boolean has_tid;
  uint64_t tid;
  protobuf_c_boolean has_id;
  uint64_t id;
};
#define PB__TX_ROLLBACK_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pb__tx_rollback_request__descriptor) \
    , 0,0, 0,0 }


struct  _Pb__TxRollbackResponse
{
  ProtobufCMessage base;
  protobuf_c_boolean has_tid;
  uint64_t tid;
  Pb__Metadata *metadata;
  protobuf_c_boolean has_id;
  uint64_t id;
};
#define PB__TX_ROLLBACK_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pb__tx_rollback_response__descriptor) \
    , 0,0, NULL, 0,0 }


/*
 * Request
 */
struct  _Pb__Request
{
  ProtobufCMessage base;
  /*
   * option (gogoproto.face)            = false; 
   */
  protobuf_c_boolean has_id;
  uint64_t id;
  protobuf_c_boolean has_time;
  int64_t time;
  protobuf_c_boolean has_method;
  Pb__RESTMethod method;
  char *basedn;
  /*
   * GET, SEARCH
   */
  char *filter;
  /*
   * GET, SEARCH
   */
  size_t n_attributes;
  char **attributes;
  protobuf_c_boolean has_scope;
  Pb__SearchScope scope;
  /*
   * PUT, MOD
   */
  Pb__Entry *entry;
  char *dn;
  protobuf_c_boolean has_recursive;
  protobuf_c_boolean recursive;
  protobuf_c_boolean has_derefaliases;
  int32_t derefaliases;
  protobuf_c_boolean has_sizelimit;
  int32_t sizelimit;
  protobuf_c_boolean has_timelimit;
  int32_t timelimit;
  protobuf_c_boolean has_typesonly;
  protobuf_c_boolean typesonly;
  Pb__ControlTypeString *controlstring;
  /*
   * Group ID
   */
  protobuf_c_boolean has_gid;
  uint64_t gid;
  /*
   * Transaction ID
   */
  protobuf_c_boolean has_tid;
  uint64_t tid;
  /*
   * Transcation Method
   */
  protobuf_c_boolean has_txmethod;
  Pb__TxMethod txmethod;
  /*
   *uint64 UUID                        = 19; // Unique ID internally used for triggering
   */
  char *applicationname;
  char *applicationmethod;
  protobuf_c_boolean has_applicationversion;
  uint32_t applicationversion;
  char *applicationpayload;
};
#define PB__REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pb__request__descriptor) \
    , 0,0, 0,0, 0,0, NULL, NULL, 0,NULL, 0,0, NULL, NULL, 0,0, 0,0, 0,0, 0,0, 0,0, NULL, 0,0, 0,0, 0,0, NULL, NULL, 0,0, NULL }


struct  _Pb__TxRequest
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  uint64_t id;
  protobuf_c_boolean has_time;
  int64_t time;
  size_t n_requests;
  Pb__Request **requests;
};
#define PB__TX_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pb__tx_request__descriptor) \
    , 0,0, 0,0, 0,NULL }


struct  _Pb__TxResponse
{
  ProtobufCMessage base;
  protobuf_c_boolean has_id;
  uint64_t id;
  protobuf_c_boolean has_lastsuccessindex;
  int32_t lastsuccessindex;
  Pb__Response *response;
};
#define PB__TX_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pb__tx_response__descriptor) \
    , 0,0, 0,0, NULL }


struct  _Pb__ControlTypeString
{
  ProtobufCMessage base;
  char *controltype;
  protobuf_c_boolean has_criticality;
  protobuf_c_boolean criticality;
  char *controlvalue;
};
#define PB__CONTROL_TYPE_STRING__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pb__control_type_string__descriptor) \
    , NULL, 0,0, NULL }


/*
 * Entry represents on single Dn in LDAP
 */
struct  _Pb__Entry
{
  ProtobufCMessage base;
  /*
   * option (gogoproto.face)            = false; 
   */
  char *dn;
  protobuf_c_boolean has_moddn;
  protobuf_c_boolean moddn;
  size_t n_attributes;
  Pb__EntryAttribute **attributes;
};
#define PB__ENTRY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pb__entry__descriptor) \
    , NULL, 0,0, 0,NULL }


/*
 * Key value pair
 */
struct  _Pb__EntryAttribute
{
  ProtobufCMessage base;
  /*
   * option (gogoproto.face)            = false; 
   */
  protobuf_c_boolean has_method;
  Pb__EntryMethod method;
  char *name;
  size_t n_values;
  char **values;
};
#define PB__ENTRY_ATTRIBUTE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pb__entry_attribute__descriptor) \
    , 0,0, NULL, 0,NULL }


/*
 * Response
 */
struct  _Pb__Response
{
  ProtobufCMessage base;
  /*
   * option (gogoproto.face)            = false; 
   */
  protobuf_c_boolean has_id;
  uint64_t id;
  /*
   * Group ID
   */
  protobuf_c_boolean has_gid;
  uint64_t gid;
  Pb__Metadata *metadata;
  protobuf_c_boolean has_resultcode;
  uint32_t resultcode;
  char *matcheddn;
  char *resultdescription;
  size_t n_entries;
  Pb__Entry **entries;
  size_t n_referrals;
  char **referrals;
  size_t n_controls;
  char **controls;
  /*
   * Tx ID
   */
  protobuf_c_boolean has_tid;
  uint64_t tid;
  /*
   * 0: Done, 1: StreamEntryResponse
   */
  protobuf_c_boolean has_streamflag;
  uint32_t streamflag;
  protobuf_c_boolean has_statuscode;
  uint32_t statuscode;
  char *status;
  char *statuscodemessage;
  char *message;
  char *data;
  protobuf_c_boolean has_count;
  uint64_t count;
};
#define PB__RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pb__response__descriptor) \
    , 0,0, 0,0, NULL, 0,0, NULL, NULL, 0,NULL, 0,NULL, 0,NULL, 0,0, 0,0, 0,0, NULL, NULL, NULL, NULL, 0,0 }


/*
 * Meta data is used to return meta data to response
 */
struct  _Pb__Metadata
{
  ProtobufCMessage base;
  protobuf_c_boolean has_nodeid;
  uint64_t nodeid;
  protobuf_c_boolean has_clusterid;
  uint64_t clusterid;
  protobuf_c_boolean has_raftindex;
  uint64_t raftindex;
  protobuf_c_boolean has_raftterm;
  uint64_t raftterm;
};
#define PB__METADATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&pb__metadata__descriptor) \
    , 0,0, 0,0, 0,0, 0,0 }


/* Pb__TxBeginRequest methods */
void   pb__tx_begin_request__init
                     (Pb__TxBeginRequest         *message);
size_t pb__tx_begin_request__get_packed_size
                     (const Pb__TxBeginRequest   *message);
size_t pb__tx_begin_request__pack
                     (const Pb__TxBeginRequest   *message,
                      uint8_t             *out);
size_t pb__tx_begin_request__pack_to_buffer
                     (const Pb__TxBeginRequest   *message,
                      ProtobufCBuffer     *buffer);
Pb__TxBeginRequest *
       pb__tx_begin_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pb__tx_begin_request__free_unpacked
                     (Pb__TxBeginRequest *message,
                      ProtobufCAllocator *allocator);
/* Pb__TxBeginResponse methods */
void   pb__tx_begin_response__init
                     (Pb__TxBeginResponse         *message);
size_t pb__tx_begin_response__get_packed_size
                     (const Pb__TxBeginResponse   *message);
size_t pb__tx_begin_response__pack
                     (const Pb__TxBeginResponse   *message,
                      uint8_t             *out);
size_t pb__tx_begin_response__pack_to_buffer
                     (const Pb__TxBeginResponse   *message,
                      ProtobufCBuffer     *buffer);
Pb__TxBeginResponse *
       pb__tx_begin_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pb__tx_begin_response__free_unpacked
                     (Pb__TxBeginResponse *message,
                      ProtobufCAllocator *allocator);
/* Pb__TxCommitRequest methods */
void   pb__tx_commit_request__init
                     (Pb__TxCommitRequest         *message);
size_t pb__tx_commit_request__get_packed_size
                     (const Pb__TxCommitRequest   *message);
size_t pb__tx_commit_request__pack
                     (const Pb__TxCommitRequest   *message,
                      uint8_t             *out);
size_t pb__tx_commit_request__pack_to_buffer
                     (const Pb__TxCommitRequest   *message,
                      ProtobufCBuffer     *buffer);
Pb__TxCommitRequest *
       pb__tx_commit_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pb__tx_commit_request__free_unpacked
                     (Pb__TxCommitRequest *message,
                      ProtobufCAllocator *allocator);
/* Pb__TxCommitResponse methods */
void   pb__tx_commit_response__init
                     (Pb__TxCommitResponse         *message);
size_t pb__tx_commit_response__get_packed_size
                     (const Pb__TxCommitResponse   *message);
size_t pb__tx_commit_response__pack
                     (const Pb__TxCommitResponse   *message,
                      uint8_t             *out);
size_t pb__tx_commit_response__pack_to_buffer
                     (const Pb__TxCommitResponse   *message,
                      ProtobufCBuffer     *buffer);
Pb__TxCommitResponse *
       pb__tx_commit_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pb__tx_commit_response__free_unpacked
                     (Pb__TxCommitResponse *message,
                      ProtobufCAllocator *allocator);
/* Pb__TxRollbackRequest methods */
void   pb__tx_rollback_request__init
                     (Pb__TxRollbackRequest         *message);
size_t pb__tx_rollback_request__get_packed_size
                     (const Pb__TxRollbackRequest   *message);
size_t pb__tx_rollback_request__pack
                     (const Pb__TxRollbackRequest   *message,
                      uint8_t             *out);
size_t pb__tx_rollback_request__pack_to_buffer
                     (const Pb__TxRollbackRequest   *message,
                      ProtobufCBuffer     *buffer);
Pb__TxRollbackRequest *
       pb__tx_rollback_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pb__tx_rollback_request__free_unpacked
                     (Pb__TxRollbackRequest *message,
                      ProtobufCAllocator *allocator);
/* Pb__TxRollbackResponse methods */
void   pb__tx_rollback_response__init
                     (Pb__TxRollbackResponse         *message);
size_t pb__tx_rollback_response__get_packed_size
                     (const Pb__TxRollbackResponse   *message);
size_t pb__tx_rollback_response__pack
                     (const Pb__TxRollbackResponse   *message,
                      uint8_t             *out);
size_t pb__tx_rollback_response__pack_to_buffer
                     (const Pb__TxRollbackResponse   *message,
                      ProtobufCBuffer     *buffer);
Pb__TxRollbackResponse *
       pb__tx_rollback_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pb__tx_rollback_response__free_unpacked
                     (Pb__TxRollbackResponse *message,
                      ProtobufCAllocator *allocator);
/* Pb__Request methods */
void   pb__request__init
                     (Pb__Request         *message);
size_t pb__request__get_packed_size
                     (const Pb__Request   *message);
size_t pb__request__pack
                     (const Pb__Request   *message,
                      uint8_t             *out);
size_t pb__request__pack_to_buffer
                     (const Pb__Request   *message,
                      ProtobufCBuffer     *buffer);
Pb__Request *
       pb__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pb__request__free_unpacked
                     (Pb__Request *message,
                      ProtobufCAllocator *allocator);
/* Pb__TxRequest methods */
void   pb__tx_request__init
                     (Pb__TxRequest         *message);
size_t pb__tx_request__get_packed_size
                     (const Pb__TxRequest   *message);
size_t pb__tx_request__pack
                     (const Pb__TxRequest   *message,
                      uint8_t             *out);
size_t pb__tx_request__pack_to_buffer
                     (const Pb__TxRequest   *message,
                      ProtobufCBuffer     *buffer);
Pb__TxRequest *
       pb__tx_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pb__tx_request__free_unpacked
                     (Pb__TxRequest *message,
                      ProtobufCAllocator *allocator);
/* Pb__TxResponse methods */
void   pb__tx_response__init
                     (Pb__TxResponse         *message);
size_t pb__tx_response__get_packed_size
                     (const Pb__TxResponse   *message);
size_t pb__tx_response__pack
                     (const Pb__TxResponse   *message,
                      uint8_t             *out);
size_t pb__tx_response__pack_to_buffer
                     (const Pb__TxResponse   *message,
                      ProtobufCBuffer     *buffer);
Pb__TxResponse *
       pb__tx_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pb__tx_response__free_unpacked
                     (Pb__TxResponse *message,
                      ProtobufCAllocator *allocator);
/* Pb__ControlTypeString methods */
void   pb__control_type_string__init
                     (Pb__ControlTypeString         *message);
size_t pb__control_type_string__get_packed_size
                     (const Pb__ControlTypeString   *message);
size_t pb__control_type_string__pack
                     (const Pb__ControlTypeString   *message,
                      uint8_t             *out);
size_t pb__control_type_string__pack_to_buffer
                     (const Pb__ControlTypeString   *message,
                      ProtobufCBuffer     *buffer);
Pb__ControlTypeString *
       pb__control_type_string__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pb__control_type_string__free_unpacked
                     (Pb__ControlTypeString *message,
                      ProtobufCAllocator *allocator);
/* Pb__Entry methods */
void   pb__entry__init
                     (Pb__Entry         *message);
size_t pb__entry__get_packed_size
                     (const Pb__Entry   *message);
size_t pb__entry__pack
                     (const Pb__Entry   *message,
                      uint8_t             *out);
size_t pb__entry__pack_to_buffer
                     (const Pb__Entry   *message,
                      ProtobufCBuffer     *buffer);
Pb__Entry *
       pb__entry__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pb__entry__free_unpacked
                     (Pb__Entry *message,
                      ProtobufCAllocator *allocator);
/* Pb__EntryAttribute methods */
void   pb__entry_attribute__init
                     (Pb__EntryAttribute         *message);
size_t pb__entry_attribute__get_packed_size
                     (const Pb__EntryAttribute   *message);
size_t pb__entry_attribute__pack
                     (const Pb__EntryAttribute   *message,
                      uint8_t             *out);
size_t pb__entry_attribute__pack_to_buffer
                     (const Pb__EntryAttribute   *message,
                      ProtobufCBuffer     *buffer);
Pb__EntryAttribute *
       pb__entry_attribute__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pb__entry_attribute__free_unpacked
                     (Pb__EntryAttribute *message,
                      ProtobufCAllocator *allocator);
/* Pb__Response methods */
void   pb__response__init
                     (Pb__Response         *message);
size_t pb__response__get_packed_size
                     (const Pb__Response   *message);
size_t pb__response__pack
                     (const Pb__Response   *message,
                      uint8_t             *out);
size_t pb__response__pack_to_buffer
                     (const Pb__Response   *message,
                      ProtobufCBuffer     *buffer);
Pb__Response *
       pb__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pb__response__free_unpacked
                     (Pb__Response *message,
                      ProtobufCAllocator *allocator);
/* Pb__Metadata methods */
void   pb__metadata__init
                     (Pb__Metadata         *message);
size_t pb__metadata__get_packed_size
                     (const Pb__Metadata   *message);
size_t pb__metadata__pack
                     (const Pb__Metadata   *message,
                      uint8_t             *out);
size_t pb__metadata__pack_to_buffer
                     (const Pb__Metadata   *message,
                      ProtobufCBuffer     *buffer);
Pb__Metadata *
       pb__metadata__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   pb__metadata__free_unpacked
                     (Pb__Metadata *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Pb__TxBeginRequest_Closure)
                 (const Pb__TxBeginRequest *message,
                  void *closure_data);
typedef void (*Pb__TxBeginResponse_Closure)
                 (const Pb__TxBeginResponse *message,
                  void *closure_data);
typedef void (*Pb__TxCommitRequest_Closure)
                 (const Pb__TxCommitRequest *message,
                  void *closure_data);
typedef void (*Pb__TxCommitResponse_Closure)
                 (const Pb__TxCommitResponse *message,
                  void *closure_data);
typedef void (*Pb__TxRollbackRequest_Closure)
                 (const Pb__TxRollbackRequest *message,
                  void *closure_data);
typedef void (*Pb__TxRollbackResponse_Closure)
                 (const Pb__TxRollbackResponse *message,
                  void *closure_data);
typedef void (*Pb__Request_Closure)
                 (const Pb__Request *message,
                  void *closure_data);
typedef void (*Pb__TxRequest_Closure)
                 (const Pb__TxRequest *message,
                  void *closure_data);
typedef void (*Pb__TxResponse_Closure)
                 (const Pb__TxResponse *message,
                  void *closure_data);
typedef void (*Pb__ControlTypeString_Closure)
                 (const Pb__ControlTypeString *message,
                  void *closure_data);
typedef void (*Pb__Entry_Closure)
                 (const Pb__Entry *message,
                  void *closure_data);
typedef void (*Pb__EntryAttribute_Closure)
                 (const Pb__EntryAttribute *message,
                  void *closure_data);
typedef void (*Pb__Response_Closure)
                 (const Pb__Response *message,
                  void *closure_data);
typedef void (*Pb__Metadata_Closure)
                 (const Pb__Metadata *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    pb__search_scope__descriptor;
extern const ProtobufCEnumDescriptor    pb__restmethod__descriptor;
extern const ProtobufCEnumDescriptor    pb__entry_method__descriptor;
extern const ProtobufCEnumDescriptor    pb__tx_method__descriptor;
extern const ProtobufCMessageDescriptor pb__tx_begin_request__descriptor;
extern const ProtobufCMessageDescriptor pb__tx_begin_response__descriptor;
extern const ProtobufCMessageDescriptor pb__tx_commit_request__descriptor;
extern const ProtobufCMessageDescriptor pb__tx_commit_response__descriptor;
extern const ProtobufCMessageDescriptor pb__tx_rollback_request__descriptor;
extern const ProtobufCMessageDescriptor pb__tx_rollback_response__descriptor;
extern const ProtobufCMessageDescriptor pb__request__descriptor;
extern const ProtobufCMessageDescriptor pb__tx_request__descriptor;
extern const ProtobufCMessageDescriptor pb__tx_response__descriptor;
extern const ProtobufCMessageDescriptor pb__control_type_string__descriptor;
extern const ProtobufCMessageDescriptor pb__entry__descriptor;
extern const ProtobufCMessageDescriptor pb__entry_attribute__descriptor;
extern const ProtobufCMessageDescriptor pb__response__descriptor;
extern const ProtobufCMessageDescriptor pb__metadata__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_d21_2eproto__INCLUDED */
