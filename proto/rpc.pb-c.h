/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: rpc.proto */

#ifndef PROTOBUF_C_rpc_2eproto__INCLUDED
#define PROTOBUF_C_rpc_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1001001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "kv.pb-c.h"
#include "auth.pb-c.h"

typedef struct _Etcdserverpb__ResponseHeader Etcdserverpb__ResponseHeader;
typedef struct _Etcdserverpb__RangeRequest Etcdserverpb__RangeRequest;
typedef struct _Etcdserverpb__RangeResponse Etcdserverpb__RangeResponse;
typedef struct _Etcdserverpb__PutRequest Etcdserverpb__PutRequest;
typedef struct _Etcdserverpb__PutResponse Etcdserverpb__PutResponse;
typedef struct _Etcdserverpb__DeleteRangeRequest Etcdserverpb__DeleteRangeRequest;
typedef struct _Etcdserverpb__DeleteRangeResponse Etcdserverpb__DeleteRangeResponse;
typedef struct _Etcdserverpb__RequestUnion Etcdserverpb__RequestUnion;
typedef struct _Etcdserverpb__ResponseUnion Etcdserverpb__ResponseUnion;
typedef struct _Etcdserverpb__Compare Etcdserverpb__Compare;
typedef struct _Etcdserverpb__TxnRequest Etcdserverpb__TxnRequest;
typedef struct _Etcdserverpb__TxnResponse Etcdserverpb__TxnResponse;
typedef struct _Etcdserverpb__CompactionRequest Etcdserverpb__CompactionRequest;
typedef struct _Etcdserverpb__CompactionResponse Etcdserverpb__CompactionResponse;
typedef struct _Etcdserverpb__HashRequest Etcdserverpb__HashRequest;
typedef struct _Etcdserverpb__HashResponse Etcdserverpb__HashResponse;
typedef struct _Etcdserverpb__SnapshotRequest Etcdserverpb__SnapshotRequest;
typedef struct _Etcdserverpb__SnapshotResponse Etcdserverpb__SnapshotResponse;
typedef struct _Etcdserverpb__WatchRequest Etcdserverpb__WatchRequest;
typedef struct _Etcdserverpb__WatchCreateRequest Etcdserverpb__WatchCreateRequest;
typedef struct _Etcdserverpb__WatchCancelRequest Etcdserverpb__WatchCancelRequest;
typedef struct _Etcdserverpb__WatchResponse Etcdserverpb__WatchResponse;
typedef struct _Etcdserverpb__LeaseGrantRequest Etcdserverpb__LeaseGrantRequest;
typedef struct _Etcdserverpb__LeaseGrantResponse Etcdserverpb__LeaseGrantResponse;
typedef struct _Etcdserverpb__LeaseRevokeRequest Etcdserverpb__LeaseRevokeRequest;
typedef struct _Etcdserverpb__LeaseRevokeResponse Etcdserverpb__LeaseRevokeResponse;
typedef struct _Etcdserverpb__LeaseKeepAliveRequest Etcdserverpb__LeaseKeepAliveRequest;
typedef struct _Etcdserverpb__LeaseKeepAliveResponse Etcdserverpb__LeaseKeepAliveResponse;
typedef struct _Etcdserverpb__Member Etcdserverpb__Member;
typedef struct _Etcdserverpb__MemberAddRequest Etcdserverpb__MemberAddRequest;
typedef struct _Etcdserverpb__MemberAddResponse Etcdserverpb__MemberAddResponse;
typedef struct _Etcdserverpb__MemberRemoveRequest Etcdserverpb__MemberRemoveRequest;
typedef struct _Etcdserverpb__MemberRemoveResponse Etcdserverpb__MemberRemoveResponse;
typedef struct _Etcdserverpb__MemberUpdateRequest Etcdserverpb__MemberUpdateRequest;
typedef struct _Etcdserverpb__MemberUpdateResponse Etcdserverpb__MemberUpdateResponse;
typedef struct _Etcdserverpb__MemberListRequest Etcdserverpb__MemberListRequest;
typedef struct _Etcdserverpb__MemberListResponse Etcdserverpb__MemberListResponse;
typedef struct _Etcdserverpb__DefragmentRequest Etcdserverpb__DefragmentRequest;
typedef struct _Etcdserverpb__DefragmentResponse Etcdserverpb__DefragmentResponse;
typedef struct _Etcdserverpb__AlarmRequest Etcdserverpb__AlarmRequest;
typedef struct _Etcdserverpb__AlarmMember Etcdserverpb__AlarmMember;
typedef struct _Etcdserverpb__AlarmResponse Etcdserverpb__AlarmResponse;
typedef struct _Etcdserverpb__StatusRequest Etcdserverpb__StatusRequest;
typedef struct _Etcdserverpb__StatusResponse Etcdserverpb__StatusResponse;
typedef struct _Etcdserverpb__AuthEnableRequest Etcdserverpb__AuthEnableRequest;
typedef struct _Etcdserverpb__AuthDisableRequest Etcdserverpb__AuthDisableRequest;
typedef struct _Etcdserverpb__AuthenticateRequest Etcdserverpb__AuthenticateRequest;
typedef struct _Etcdserverpb__AuthUserAddRequest Etcdserverpb__AuthUserAddRequest;
typedef struct _Etcdserverpb__AuthUserGetRequest Etcdserverpb__AuthUserGetRequest;
typedef struct _Etcdserverpb__AuthUserDeleteRequest Etcdserverpb__AuthUserDeleteRequest;
typedef struct _Etcdserverpb__AuthUserChangePasswordRequest Etcdserverpb__AuthUserChangePasswordRequest;
typedef struct _Etcdserverpb__AuthUserGrantRequest Etcdserverpb__AuthUserGrantRequest;
typedef struct _Etcdserverpb__AuthUserRevokeRoleRequest Etcdserverpb__AuthUserRevokeRoleRequest;
typedef struct _Etcdserverpb__AuthRoleAddRequest Etcdserverpb__AuthRoleAddRequest;
typedef struct _Etcdserverpb__AuthRoleGetRequest Etcdserverpb__AuthRoleGetRequest;
typedef struct _Etcdserverpb__AuthRoleDeleteRequest Etcdserverpb__AuthRoleDeleteRequest;
typedef struct _Etcdserverpb__AuthRoleGrantRequest Etcdserverpb__AuthRoleGrantRequest;
typedef struct _Etcdserverpb__AuthRoleRevokePermissionRequest Etcdserverpb__AuthRoleRevokePermissionRequest;
typedef struct _Etcdserverpb__AuthEnableResponse Etcdserverpb__AuthEnableResponse;
typedef struct _Etcdserverpb__AuthDisableResponse Etcdserverpb__AuthDisableResponse;
typedef struct _Etcdserverpb__AuthenticateResponse Etcdserverpb__AuthenticateResponse;
typedef struct _Etcdserverpb__AuthUserAddResponse Etcdserverpb__AuthUserAddResponse;
typedef struct _Etcdserverpb__AuthUserGetResponse Etcdserverpb__AuthUserGetResponse;
typedef struct _Etcdserverpb__AuthUserDeleteResponse Etcdserverpb__AuthUserDeleteResponse;
typedef struct _Etcdserverpb__AuthUserChangePasswordResponse Etcdserverpb__AuthUserChangePasswordResponse;
typedef struct _Etcdserverpb__AuthUserGrantResponse Etcdserverpb__AuthUserGrantResponse;
typedef struct _Etcdserverpb__AuthUserRevokeRoleResponse Etcdserverpb__AuthUserRevokeRoleResponse;
typedef struct _Etcdserverpb__AuthRoleAddResponse Etcdserverpb__AuthRoleAddResponse;
typedef struct _Etcdserverpb__AuthRoleGetResponse Etcdserverpb__AuthRoleGetResponse;
typedef struct _Etcdserverpb__AuthRoleDeleteResponse Etcdserverpb__AuthRoleDeleteResponse;
typedef struct _Etcdserverpb__AuthRoleGrantResponse Etcdserverpb__AuthRoleGrantResponse;
typedef struct _Etcdserverpb__AuthRoleRevokePermissionResponse Etcdserverpb__AuthRoleRevokePermissionResponse;


/* --- enums --- */

typedef enum _Etcdserverpb__RangeRequest__SortOrder {
  /*
   * default, no sorting
   */
  ETCDSERVERPB__RANGE_REQUEST__SORT_ORDER__NONE = 0,
  /*
   * lowest target value first
   */
  ETCDSERVERPB__RANGE_REQUEST__SORT_ORDER__ASCEND = 1,
  /*
   * highest target value first
   */
  ETCDSERVERPB__RANGE_REQUEST__SORT_ORDER__DESCEND = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ETCDSERVERPB__RANGE_REQUEST__SORT_ORDER)
} Etcdserverpb__RangeRequest__SortOrder;
typedef enum _Etcdserverpb__RangeRequest__SortTarget {
  ETCDSERVERPB__RANGE_REQUEST__SORT_TARGET__KEY = 0,
  ETCDSERVERPB__RANGE_REQUEST__SORT_TARGET__VERSION = 1,
  ETCDSERVERPB__RANGE_REQUEST__SORT_TARGET__CREATE = 2,
  ETCDSERVERPB__RANGE_REQUEST__SORT_TARGET__MOD = 3,
  ETCDSERVERPB__RANGE_REQUEST__SORT_TARGET__VALUE = 4
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ETCDSERVERPB__RANGE_REQUEST__SORT_TARGET)
} Etcdserverpb__RangeRequest__SortTarget;
typedef enum _Etcdserverpb__Compare__CompareResult {
  ETCDSERVERPB__COMPARE__COMPARE_RESULT__EQUAL = 0,
  ETCDSERVERPB__COMPARE__COMPARE_RESULT__GREATER = 1,
  ETCDSERVERPB__COMPARE__COMPARE_RESULT__LESS = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ETCDSERVERPB__COMPARE__COMPARE_RESULT)
} Etcdserverpb__Compare__CompareResult;
typedef enum _Etcdserverpb__Compare__CompareTarget {
  ETCDSERVERPB__COMPARE__COMPARE_TARGET__VERSION = 0,
  ETCDSERVERPB__COMPARE__COMPARE_TARGET__CREATE = 1,
  ETCDSERVERPB__COMPARE__COMPARE_TARGET__MOD = 2,
  ETCDSERVERPB__COMPARE__COMPARE_TARGET__VALUE = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ETCDSERVERPB__COMPARE__COMPARE_TARGET)
} Etcdserverpb__Compare__CompareTarget;
typedef enum _Etcdserverpb__AlarmRequest__AlarmAction {
  ETCDSERVERPB__ALARM_REQUEST__ALARM_ACTION__GET = 0,
  ETCDSERVERPB__ALARM_REQUEST__ALARM_ACTION__ACTIVATE = 1,
  ETCDSERVERPB__ALARM_REQUEST__ALARM_ACTION__DEACTIVATE = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ETCDSERVERPB__ALARM_REQUEST__ALARM_ACTION)
} Etcdserverpb__AlarmRequest__AlarmAction;
typedef enum _Etcdserverpb__AlarmType {
  /*
   * default, used to query if any alarm is active
   */
  ETCDSERVERPB__ALARM_TYPE__NONE = 0,
  /*
   * space quota is exhausted
   */
  ETCDSERVERPB__ALARM_TYPE__NOSPACE = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(ETCDSERVERPB__ALARM_TYPE)
} Etcdserverpb__AlarmType;

/* --- messages --- */

struct  _Etcdserverpb__ResponseHeader
{
  ProtobufCMessage base;
  /*
   * cluster_id is the ID of the cluster which sent the response.
   */
  protobuf_c_boolean has_cluster_id;
  uint64_t cluster_id;
  /*
   * member_id is the ID of the member which sent the response.
   */
  protobuf_c_boolean has_member_id;
  uint64_t member_id;
  /*
   * revision is the key-value store revision when the request was applied.
   */
  protobuf_c_boolean has_revision;
  int64_t revision;
  /*
   * raft_term is the raft term when the request was applied.
   */
  protobuf_c_boolean has_raft_term;
  uint64_t raft_term;
};
#define ETCDSERVERPB__RESPONSE_HEADER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__response_header__descriptor) \
    , 0,0, 0,0, 0,0, 0,0 }


struct  _Etcdserverpb__RangeRequest
{
  ProtobufCMessage base;
  /*
   * key is the first key for the range. If range_end is not given, the request only looks up key.
   */
  protobuf_c_boolean has_key;
  ProtobufCBinaryData key;
  /*
   * range_end is the upper bound on the requested range [key, range_end).
   * If range_end is '\0', the range is all keys >= key.
   * If the range_end is one bit larger than the given key,
   * then the range requests get the all keys with the prefix (the given key).
   * If both key and range_end are '\0', then range requests returns all keys.
   */
  protobuf_c_boolean has_range_end;
  ProtobufCBinaryData range_end;
  /*
   * limit is a limit on the number of keys returned for the request.
   */
  protobuf_c_boolean has_limit;
  int64_t limit;
  /*
   * revision is the point-in-time of the key-value store to use for the range.
   * If revision is less or equal to zero, the range is over the newest key-value store.
   * If the revision has been compacted, ErrCompaction is returned as a response.
   */
  protobuf_c_boolean has_revision;
  int64_t revision;
  /*
   * sort_order is the order for returned sorted results.
   */
  protobuf_c_boolean has_sort_order;
  Etcdserverpb__RangeRequest__SortOrder sort_order;
  /*
   * sort_target is the key-value field to use for sorting.
   */
  protobuf_c_boolean has_sort_target;
  Etcdserverpb__RangeRequest__SortTarget sort_target;
  /*
   * serializable sets the range request to use serializable member-local reads.
   * Range requests are linearizable by default; linearizable requests have higher
   * latency and lower throughput than serializable requests but reflect the current
   * consensus of the cluster. For better performance, in exchange for possible stale reads,
   * a serializable range request is served locally without needing to reach consensus
   * with other nodes in the cluster.
   */
  protobuf_c_boolean has_serializable;
  protobuf_c_boolean serializable;
};
#define ETCDSERVERPB__RANGE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__range_request__descriptor) \
    , 0,{0,NULL}, 0,{0,NULL}, 0,0, 0,0, 0,0, 0,0, 0,0 }


struct  _Etcdserverpb__RangeResponse
{
  ProtobufCMessage base;
  Etcdserverpb__ResponseHeader *header;
  /*
   * kvs is the list of key-value pairs matched by the range request.
   */
  size_t n_kvs;
  Mvccpb__KeyValue **kvs;
  /*
   * more indicates if there are more keys to return in the requested range.
   */
  protobuf_c_boolean has_more;
  protobuf_c_boolean more;
};
#define ETCDSERVERPB__RANGE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__range_response__descriptor) \
    , NULL, 0,NULL, 0,0 }


struct  _Etcdserverpb__PutRequest
{
  ProtobufCMessage base;
  /*
   * key is the key, in bytes, to put into the key-value store.
   */
  protobuf_c_boolean has_key;
  ProtobufCBinaryData key;
  /*
   * value is the value, in bytes, to associate with the key in the key-value store.
   */
  protobuf_c_boolean has_value;
  ProtobufCBinaryData value;
  /*
   * lease is the lease ID to associate with the key in the key-value store. A lease
   * value of 0 indicates no lease.
   */
  protobuf_c_boolean has_lease;
  int64_t lease;
};
#define ETCDSERVERPB__PUT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__put_request__descriptor) \
    , 0,{0,NULL}, 0,{0,NULL}, 0,0 }


struct  _Etcdserverpb__PutResponse
{
  ProtobufCMessage base;
  Etcdserverpb__ResponseHeader *header;
};
#define ETCDSERVERPB__PUT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__put_response__descriptor) \
    , NULL }


struct  _Etcdserverpb__DeleteRangeRequest
{
  ProtobufCMessage base;
  /*
   * key is the first key to delete in the range.
   */
  protobuf_c_boolean has_key;
  ProtobufCBinaryData key;
  /*
   * range_end is the key following the last key to delete for the range [key, range_end).
   * If range_end is not given, the range is defined to contain only the key argument.
   * If range_end is '\0', the range is all keys greater than or equal to the key argument.
   */
  protobuf_c_boolean has_range_end;
  ProtobufCBinaryData range_end;
};
#define ETCDSERVERPB__DELETE_RANGE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__delete_range_request__descriptor) \
    , 0,{0,NULL}, 0,{0,NULL} }


struct  _Etcdserverpb__DeleteRangeResponse
{
  ProtobufCMessage base;
  Etcdserverpb__ResponseHeader *header;
  /*
   * deleted is the number of keys deleted by the delete range request.
   */
  protobuf_c_boolean has_deleted;
  int64_t deleted;
};
#define ETCDSERVERPB__DELETE_RANGE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__delete_range_response__descriptor) \
    , NULL, 0,0 }


typedef enum {
  ETCDSERVERPB__REQUEST_UNION__REQUEST__NOT_SET = 0,
  ETCDSERVERPB__REQUEST_UNION__REQUEST_REQUEST_RANGE = 1,
  ETCDSERVERPB__REQUEST_UNION__REQUEST_REQUEST_PUT = 2,
  ETCDSERVERPB__REQUEST_UNION__REQUEST_REQUEST_DELETE_RANGE = 3,
} Etcdserverpb__RequestUnion__RequestCase;

struct  _Etcdserverpb__RequestUnion
{
  ProtobufCMessage base;
  Etcdserverpb__RequestUnion__RequestCase request_case;
  union {
    Etcdserverpb__RangeRequest *request_range;
    Etcdserverpb__PutRequest *request_put;
    Etcdserverpb__DeleteRangeRequest *request_delete_range;
  };
};
#define ETCDSERVERPB__REQUEST_UNION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__request_union__descriptor) \
    , ETCDSERVERPB__REQUEST_UNION__REQUEST__NOT_SET, {} }


typedef enum {
  ETCDSERVERPB__RESPONSE_UNION__RESPONSE__NOT_SET = 0,
  ETCDSERVERPB__RESPONSE_UNION__RESPONSE_RESPONSE_RANGE = 1,
  ETCDSERVERPB__RESPONSE_UNION__RESPONSE_RESPONSE_PUT = 2,
  ETCDSERVERPB__RESPONSE_UNION__RESPONSE_RESPONSE_DELETE_RANGE = 3,
} Etcdserverpb__ResponseUnion__ResponseCase;

struct  _Etcdserverpb__ResponseUnion
{
  ProtobufCMessage base;
  Etcdserverpb__ResponseUnion__ResponseCase response_case;
  union {
    Etcdserverpb__RangeResponse *response_range;
    Etcdserverpb__PutResponse *response_put;
    Etcdserverpb__DeleteRangeResponse *response_delete_range;
  };
};
#define ETCDSERVERPB__RESPONSE_UNION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__response_union__descriptor) \
    , ETCDSERVERPB__RESPONSE_UNION__RESPONSE__NOT_SET, {} }


typedef enum {
  ETCDSERVERPB__COMPARE__TARGET_UNION__NOT_SET = 0,
  ETCDSERVERPB__COMPARE__TARGET_UNION_VERSION = 4,
  ETCDSERVERPB__COMPARE__TARGET_UNION_CREATE_REVISION = 5,
  ETCDSERVERPB__COMPARE__TARGET_UNION_MOD_REVISION = 6,
  ETCDSERVERPB__COMPARE__TARGET_UNION_VALUE = 7,
} Etcdserverpb__Compare__TargetUnionCase;

struct  _Etcdserverpb__Compare
{
  ProtobufCMessage base;
  /*
   * result is logical comparison operation for this comparison.
   */
  protobuf_c_boolean has_result;
  Etcdserverpb__Compare__CompareResult result;
  /*
   * target is the key-value field to inspect for the comparison.
   */
  protobuf_c_boolean has_target;
  Etcdserverpb__Compare__CompareTarget target;
  /*
   * key is the subject key for the comparison operation.
   */
  protobuf_c_boolean has_key;
  ProtobufCBinaryData key;
  Etcdserverpb__Compare__TargetUnionCase target_union_case;
  union {
    /*
     * version is the version of the given key
     */
    int64_t version;
    /*
     * create_revision is the creation revision of the given key
     */
    int64_t create_revision;
    /*
     * mod_revision is the last modified revision of the given key.
     */
    int64_t mod_revision;
    /*
     * value is the value of the given key, in bytes.
     */
    ProtobufCBinaryData value;
  };
};
#define ETCDSERVERPB__COMPARE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__compare__descriptor) \
    , 0,0, 0,0, 0,{0,NULL}, ETCDSERVERPB__COMPARE__TARGET_UNION__NOT_SET, {} }


/*
 * From google paxosdb paper:
 * Our implementation hinges around a powerful primitive which we call MultiOp. All other database
 * operations except for iteration are implemented as a single call to MultiOp. A MultiOp is applied atomically
 * and consists of three components:
 * 1. A list of tests called guard. Each test in guard checks a single entry in the database. It may check
 * for the absence or presence of a value, or compare with a given value. Two different tests in the guard
 * may apply to the same or different entries in the database. All tests in the guard are applied and
 * MultiOp returns the results. If all tests are true, MultiOp executes t op (see item 2 below), otherwise
 * it executes f op (see item 3 below).
 * 2. A list of database operations called t op. Each operation in the list is either an insert, delete, or
 * lookup operation, and applies to a single database entry. Two different operations in the list may apply
 * to the same or different entries in the database. These operations are executed
 * if guard evaluates to
 * true.
 * 3. A list of database operations called f op. Like t op, but executed if guard evaluates to false.
 */
struct  _Etcdserverpb__TxnRequest
{
  ProtobufCMessage base;
  /*
   * compare is a list of predicates representing a conjunction of terms.
   * If the comparisons succeed, then the success requests will be processed in order,
   * and the response will contain their respective responses in order.
   * If the comparisons fail, then the failure requests will be processed in order,
   * and the response will contain their respective responses in order.
   */
  size_t n_compare;
  Etcdserverpb__Compare **compare;
  /*
   * success is a list of requests which will be applied when compare evaluates to true.
   */
  size_t n_success;
  Etcdserverpb__RequestUnion **success;
  /*
   * failure is a list of requests which will be applied when compare evaluates to false.
   */
  size_t n_failure;
  Etcdserverpb__RequestUnion **failure;
};
#define ETCDSERVERPB__TXN_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__txn_request__descriptor) \
    , 0,NULL, 0,NULL, 0,NULL }


struct  _Etcdserverpb__TxnResponse
{
  ProtobufCMessage base;
  Etcdserverpb__ResponseHeader *header;
  /*
   * succeeded is set to true if the compare evaluated to true or false otherwise.
   */
  protobuf_c_boolean has_succeeded;
  protobuf_c_boolean succeeded;
  /*
   * responses is a list of responses corresponding to the results from applying
   * success if succeeded is true or failure if succeeded is false.
   */
  size_t n_responses;
  Etcdserverpb__ResponseUnion **responses;
};
#define ETCDSERVERPB__TXN_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__txn_response__descriptor) \
    , NULL, 0,0, 0,NULL }


/*
 * CompactionRequest compacts the key-value store up to a given revision. All superseded keys
 * with a revision less than the compaction revision will be removed.
 */
struct  _Etcdserverpb__CompactionRequest
{
  ProtobufCMessage base;
  /*
   * revision is the key-value store revision for the compaction operation. 
   */
  protobuf_c_boolean has_revision;
  int64_t revision;
  /*
   * physical is set so the RPC will wait until the compaction is physically
   * applied to the local database such that compacted entries are totally
   * removed from the backend database.
   */
  protobuf_c_boolean has_physical;
  protobuf_c_boolean physical;
};
#define ETCDSERVERPB__COMPACTION_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__compaction_request__descriptor) \
    , 0,0, 0,0 }


struct  _Etcdserverpb__CompactionResponse
{
  ProtobufCMessage base;
  Etcdserverpb__ResponseHeader *header;
};
#define ETCDSERVERPB__COMPACTION_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__compaction_response__descriptor) \
    , NULL }


struct  _Etcdserverpb__HashRequest
{
  ProtobufCMessage base;
};
#define ETCDSERVERPB__HASH_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__hash_request__descriptor) \
     }


struct  _Etcdserverpb__HashResponse
{
  ProtobufCMessage base;
  Etcdserverpb__ResponseHeader *header;
  /*
   * hash is the hash value computed from the responding member's key-value store.
   */
  protobuf_c_boolean has_hash;
  uint32_t hash;
};
#define ETCDSERVERPB__HASH_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__hash_response__descriptor) \
    , NULL, 0,0 }


struct  _Etcdserverpb__SnapshotRequest
{
  ProtobufCMessage base;
};
#define ETCDSERVERPB__SNAPSHOT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__snapshot_request__descriptor) \
     }


struct  _Etcdserverpb__SnapshotResponse
{
  ProtobufCMessage base;
  /*
   * header has the current key-value store information. The first header in the snapshot
   * stream indicates the point in time of the snapshot.
   */
  Etcdserverpb__ResponseHeader *header;
  /*
   * remaining_bytes is the number of blob bytes to be sent after this message
   */
  protobuf_c_boolean has_remaining_bytes;
  uint64_t remaining_bytes;
  /*
   * blob contains the next chunk of the snapshot in the snapshot stream.
   */
  protobuf_c_boolean has_blob;
  ProtobufCBinaryData blob;
};
#define ETCDSERVERPB__SNAPSHOT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__snapshot_response__descriptor) \
    , NULL, 0,0, 0,{0,NULL} }


typedef enum {
  ETCDSERVERPB__WATCH_REQUEST__REQUEST_UNION__NOT_SET = 0,
  ETCDSERVERPB__WATCH_REQUEST__REQUEST_UNION_CREATE_REQUEST = 1,
  ETCDSERVERPB__WATCH_REQUEST__REQUEST_UNION_CANCEL_REQUEST = 2,
} Etcdserverpb__WatchRequest__RequestUnionCase;

struct  _Etcdserverpb__WatchRequest
{
  ProtobufCMessage base;
  Etcdserverpb__WatchRequest__RequestUnionCase request_union_case;
  union {
    Etcdserverpb__WatchCreateRequest *create_request;
    Etcdserverpb__WatchCancelRequest *cancel_request;
  };
};
#define ETCDSERVERPB__WATCH_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__watch_request__descriptor) \
    , ETCDSERVERPB__WATCH_REQUEST__REQUEST_UNION__NOT_SET, {} }


struct  _Etcdserverpb__WatchCreateRequest
{
  ProtobufCMessage base;
  /*
   * key is the key to register for watching.
   */
  protobuf_c_boolean has_key;
  ProtobufCBinaryData key;
  /*
   * range_end is the end of the range [key, range_end) to watch. If range_end is not given,
   * only the key argument is watched. If range_end is equal to '\0', all keys greater than
   * or equal to the key argument are watched.
   */
  protobuf_c_boolean has_range_end;
  ProtobufCBinaryData range_end;
  /*
   * start_revision is an optional revision to watch from (inclusive). No start_revision is "now".
   */
  protobuf_c_boolean has_start_revision;
  int64_t start_revision;
  /*
   * progress_notify is set so that the etcd server will periodically send a WatchResponse with
   * no events to the new watcher if there are no recent events. It is useful when clients
   * wish to recover a disconnected watcher starting from a recent known revision.
   * The etcd server may decide how often it will send notifications based on current load.
   */
  protobuf_c_boolean has_progress_notify;
  protobuf_c_boolean progress_notify;
};
#define ETCDSERVERPB__WATCH_CREATE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__watch_create_request__descriptor) \
    , 0,{0,NULL}, 0,{0,NULL}, 0,0, 0,0 }


struct  _Etcdserverpb__WatchCancelRequest
{
  ProtobufCMessage base;
  /*
   * watch_id is the watcher id to cancel so that no more events are transmitted.
   */
  protobuf_c_boolean has_watch_id;
  int64_t watch_id;
};
#define ETCDSERVERPB__WATCH_CANCEL_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__watch_cancel_request__descriptor) \
    , 0,0 }


struct  _Etcdserverpb__WatchResponse
{
  ProtobufCMessage base;
  Etcdserverpb__ResponseHeader *header;
  /*
   * watch_id is the ID of the watcher that corresponds to the response.
   */
  protobuf_c_boolean has_watch_id;
  int64_t watch_id;
  /*
   * created is set to true if the response is for a create watch request.
   * The client should record the watch_id and expect to receive events for
   * the created watcher from the same stream.
   * All events sent to the created watcher will attach with the same watch_id.
   */
  protobuf_c_boolean has_created;
  protobuf_c_boolean created;
  /*
   * canceled is set to true if the response is for a cancel watch request.
   * No further events will be sent to the canceled watcher.
   */
  protobuf_c_boolean has_canceled;
  protobuf_c_boolean canceled;
  /*
   * compact_revision is set to the minimum index if a watcher tries to watch
   * at a compacted index.
   * This happens when creating a watcher at a compacted revision or the watcher cannot
   * catch up with the progress of the key-value store. 
   * The client should treat the watcher as canceled and should not try to create any
   * watcher with the same start_revision again.
   */
  protobuf_c_boolean has_compact_revision;
  int64_t compact_revision;
  size_t n_events;
  Mvccpb__Event **events;
};
#define ETCDSERVERPB__WATCH_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__watch_response__descriptor) \
    , NULL, 0,0, 0,0, 0,0, 0,0, 0,NULL }


struct  _Etcdserverpb__LeaseGrantRequest
{
  ProtobufCMessage base;
  /*
   * TTL is the advisory time-to-live in seconds.
   */
  protobuf_c_boolean has_ttl;
  int64_t ttl;
  /*
   * ID is the requested ID for the lease. If ID is set to 0, the lessor chooses an ID.
   */
  protobuf_c_boolean has_id;
  int64_t id;
};
#define ETCDSERVERPB__LEASE_GRANT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__lease_grant_request__descriptor) \
    , 0,0, 0,0 }


struct  _Etcdserverpb__LeaseGrantResponse
{
  ProtobufCMessage base;
  Etcdserverpb__ResponseHeader *header;
  /*
   * ID is the lease ID for the granted lease.
   */
  protobuf_c_boolean has_id;
  int64_t id;
  /*
   * TTL is the server chosen lease time-to-live in seconds.
   */
  protobuf_c_boolean has_ttl;
  int64_t ttl;
  char *error;
};
#define ETCDSERVERPB__LEASE_GRANT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__lease_grant_response__descriptor) \
    , NULL, 0,0, 0,0, NULL }


struct  _Etcdserverpb__LeaseRevokeRequest
{
  ProtobufCMessage base;
  /*
   * ID is the lease ID to revoke. When the ID is revoked, all associated keys will be deleted.
   */
  protobuf_c_boolean has_id;
  int64_t id;
};
#define ETCDSERVERPB__LEASE_REVOKE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__lease_revoke_request__descriptor) \
    , 0,0 }


struct  _Etcdserverpb__LeaseRevokeResponse
{
  ProtobufCMessage base;
  Etcdserverpb__ResponseHeader *header;
};
#define ETCDSERVERPB__LEASE_REVOKE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__lease_revoke_response__descriptor) \
    , NULL }


struct  _Etcdserverpb__LeaseKeepAliveRequest
{
  ProtobufCMessage base;
  /*
   * ID is the lease ID for the lease to keep alive.
   */
  protobuf_c_boolean has_id;
  int64_t id;
};
#define ETCDSERVERPB__LEASE_KEEP_ALIVE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__lease_keep_alive_request__descriptor) \
    , 0,0 }


struct  _Etcdserverpb__LeaseKeepAliveResponse
{
  ProtobufCMessage base;
  Etcdserverpb__ResponseHeader *header;
  /*
   * ID is the lease ID from the keep alive request.
   */
  protobuf_c_boolean has_id;
  int64_t id;
  /*
   * TTL is the new time-to-live for the lease.
   */
  protobuf_c_boolean has_ttl;
  int64_t ttl;
};
#define ETCDSERVERPB__LEASE_KEEP_ALIVE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__lease_keep_alive_response__descriptor) \
    , NULL, 0,0, 0,0 }


struct  _Etcdserverpb__Member
{
  ProtobufCMessage base;
  /*
   * ID is the member ID for this member.
   */
  protobuf_c_boolean has_id;
  uint64_t id;
  /*
   * name is the human-readable name of the member. If the member is not started, the name will be an empty string.
   */
  char *name;
  /*
   * peerURLs is the list of URLs the member exposes to the cluster for communication.
   */
  size_t n_peerurls;
  char **peerurls;
  /*
   * clientURLs is the list of URLs the member exposes to clients for communication. If the member is not started, clientURLs will be empty.
   */
  size_t n_clienturls;
  char **clienturls;
};
#define ETCDSERVERPB__MEMBER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__member__descriptor) \
    , 0,0, NULL, 0,NULL, 0,NULL }


struct  _Etcdserverpb__MemberAddRequest
{
  ProtobufCMessage base;
  /*
   * peerURLs is the list of URLs the added member will use to communicate with the cluster.
   */
  size_t n_peerurls;
  char **peerurls;
};
#define ETCDSERVERPB__MEMBER_ADD_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__member_add_request__descriptor) \
    , 0,NULL }


struct  _Etcdserverpb__MemberAddResponse
{
  ProtobufCMessage base;
  Etcdserverpb__ResponseHeader *header;
  /*
   * member is the member information for the added member.
   */
  Etcdserverpb__Member *member;
};
#define ETCDSERVERPB__MEMBER_ADD_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__member_add_response__descriptor) \
    , NULL, NULL }


struct  _Etcdserverpb__MemberRemoveRequest
{
  ProtobufCMessage base;
  /*
   * ID is the member ID of the member to remove.
   */
  protobuf_c_boolean has_id;
  uint64_t id;
};
#define ETCDSERVERPB__MEMBER_REMOVE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__member_remove_request__descriptor) \
    , 0,0 }


struct  _Etcdserverpb__MemberRemoveResponse
{
  ProtobufCMessage base;
  Etcdserverpb__ResponseHeader *header;
};
#define ETCDSERVERPB__MEMBER_REMOVE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__member_remove_response__descriptor) \
    , NULL }


struct  _Etcdserverpb__MemberUpdateRequest
{
  ProtobufCMessage base;
  /*
   * ID is the member ID of the member to update.
   */
  protobuf_c_boolean has_id;
  uint64_t id;
  /*
   * peerURLs is the new list of URLs the member will use to communicate with the cluster.
   */
  size_t n_peerurls;
  char **peerurls;
};
#define ETCDSERVERPB__MEMBER_UPDATE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__member_update_request__descriptor) \
    , 0,0, 0,NULL }


struct  _Etcdserverpb__MemberUpdateResponse
{
  ProtobufCMessage base;
  Etcdserverpb__ResponseHeader *header;
};
#define ETCDSERVERPB__MEMBER_UPDATE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__member_update_response__descriptor) \
    , NULL }


struct  _Etcdserverpb__MemberListRequest
{
  ProtobufCMessage base;
};
#define ETCDSERVERPB__MEMBER_LIST_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__member_list_request__descriptor) \
     }


struct  _Etcdserverpb__MemberListResponse
{
  ProtobufCMessage base;
  Etcdserverpb__ResponseHeader *header;
  /*
   * members is a list of all members associated with the cluster.
   */
  size_t n_members;
  Etcdserverpb__Member **members;
};
#define ETCDSERVERPB__MEMBER_LIST_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__member_list_response__descriptor) \
    , NULL, 0,NULL }


struct  _Etcdserverpb__DefragmentRequest
{
  ProtobufCMessage base;
};
#define ETCDSERVERPB__DEFRAGMENT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__defragment_request__descriptor) \
     }


struct  _Etcdserverpb__DefragmentResponse
{
  ProtobufCMessage base;
  Etcdserverpb__ResponseHeader *header;
};
#define ETCDSERVERPB__DEFRAGMENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__defragment_response__descriptor) \
    , NULL }


struct  _Etcdserverpb__AlarmRequest
{
  ProtobufCMessage base;
  /*
   * action is the kind of alarm request to issue. The action
   * may GET alarm statuses, ACTIVATE an alarm, or DEACTIVATE a
   * raised alarm.
   */
  protobuf_c_boolean has_action;
  Etcdserverpb__AlarmRequest__AlarmAction action;
  /*
   * memberID is the ID of the member associated with the alarm. If memberID is 0, the
   * alarm request covers all members.
   */
  protobuf_c_boolean has_memberid;
  uint64_t memberid;
  /*
   * alarm is the type of alarm to consider for this request.
   */
  protobuf_c_boolean has_alarm;
  Etcdserverpb__AlarmType alarm;
};
#define ETCDSERVERPB__ALARM_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__alarm_request__descriptor) \
    , 0,0, 0,0, 0,0 }


struct  _Etcdserverpb__AlarmMember
{
  ProtobufCMessage base;
  /*
   * memberID is the ID of the member associated with the raised alarm.
   */
  protobuf_c_boolean has_memberid;
  uint64_t memberid;
  /*
   * alarm is the type of alarm which has been raised.
   */
  protobuf_c_boolean has_alarm;
  Etcdserverpb__AlarmType alarm;
};
#define ETCDSERVERPB__ALARM_MEMBER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__alarm_member__descriptor) \
    , 0,0, 0,0 }


struct  _Etcdserverpb__AlarmResponse
{
  ProtobufCMessage base;
  Etcdserverpb__ResponseHeader *header;
  /*
   * alarms is a list of alarms associated with the alarm request.
   */
  size_t n_alarms;
  Etcdserverpb__AlarmMember **alarms;
};
#define ETCDSERVERPB__ALARM_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__alarm_response__descriptor) \
    , NULL, 0,NULL }


struct  _Etcdserverpb__StatusRequest
{
  ProtobufCMessage base;
};
#define ETCDSERVERPB__STATUS_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__status_request__descriptor) \
     }


struct  _Etcdserverpb__StatusResponse
{
  ProtobufCMessage base;
  Etcdserverpb__ResponseHeader *header;
  /*
   * version is the cluster protocol version used by the responding member.
   */
  char *version;
  /*
   * dbSize is the size of the backend database, in bytes, of the responding member.
   */
  protobuf_c_boolean has_dbsize;
  int64_t dbsize;
  /*
   * leader is the member ID which the responding member believes is the current leader.
   */
  protobuf_c_boolean has_leader;
  uint64_t leader;
  /*
   * raftIndex is the current raft index of the responding member.
   */
  protobuf_c_boolean has_raftindex;
  uint64_t raftindex;
  /*
   * raftTerm is the current raft term of the responding member.
   */
  protobuf_c_boolean has_raftterm;
  uint64_t raftterm;
};
#define ETCDSERVERPB__STATUS_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__status_response__descriptor) \
    , NULL, NULL, 0,0, 0,0, 0,0, 0,0 }


struct  _Etcdserverpb__AuthEnableRequest
{
  ProtobufCMessage base;
};
#define ETCDSERVERPB__AUTH_ENABLE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__auth_enable_request__descriptor) \
     }


struct  _Etcdserverpb__AuthDisableRequest
{
  ProtobufCMessage base;
};
#define ETCDSERVERPB__AUTH_DISABLE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__auth_disable_request__descriptor) \
     }


struct  _Etcdserverpb__AuthenticateRequest
{
  ProtobufCMessage base;
  char *name;
  char *password;
};
#define ETCDSERVERPB__AUTHENTICATE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__authenticate_request__descriptor) \
    , NULL, NULL }


struct  _Etcdserverpb__AuthUserAddRequest
{
  ProtobufCMessage base;
  char *name;
  char *password;
};
#define ETCDSERVERPB__AUTH_USER_ADD_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__auth_user_add_request__descriptor) \
    , NULL, NULL }


struct  _Etcdserverpb__AuthUserGetRequest
{
  ProtobufCMessage base;
  char *name;
};
#define ETCDSERVERPB__AUTH_USER_GET_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__auth_user_get_request__descriptor) \
    , NULL }


struct  _Etcdserverpb__AuthUserDeleteRequest
{
  ProtobufCMessage base;
  /*
   * name is the name of the user to delete.
   */
  char *name;
};
#define ETCDSERVERPB__AUTH_USER_DELETE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__auth_user_delete_request__descriptor) \
    , NULL }


struct  _Etcdserverpb__AuthUserChangePasswordRequest
{
  ProtobufCMessage base;
  /*
   * name is the name of the user whose password is being changed.
   */
  char *name;
  /*
   * password is the new password for the user.
   */
  char *password;
};
#define ETCDSERVERPB__AUTH_USER_CHANGE_PASSWORD_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__auth_user_change_password_request__descriptor) \
    , NULL, NULL }


struct  _Etcdserverpb__AuthUserGrantRequest
{
  ProtobufCMessage base;
  /*
   * user is the name of the user which should be granted a given role.
   */
  char *user;
  /*
   * role is the name of the role to grant to the user.
   */
  char *role;
};
#define ETCDSERVERPB__AUTH_USER_GRANT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__auth_user_grant_request__descriptor) \
    , NULL, NULL }


struct  _Etcdserverpb__AuthUserRevokeRoleRequest
{
  ProtobufCMessage base;
  char *name;
  char *role;
};
#define ETCDSERVERPB__AUTH_USER_REVOKE_ROLE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__auth_user_revoke_role_request__descriptor) \
    , NULL, NULL }


struct  _Etcdserverpb__AuthRoleAddRequest
{
  ProtobufCMessage base;
  /*
   * name is the name of the role to add to the authentication system.
   */
  char *name;
};
#define ETCDSERVERPB__AUTH_ROLE_ADD_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__auth_role_add_request__descriptor) \
    , NULL }


struct  _Etcdserverpb__AuthRoleGetRequest
{
  ProtobufCMessage base;
  char *role;
};
#define ETCDSERVERPB__AUTH_ROLE_GET_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__auth_role_get_request__descriptor) \
    , NULL }


struct  _Etcdserverpb__AuthRoleDeleteRequest
{
  ProtobufCMessage base;
  char *role;
};
#define ETCDSERVERPB__AUTH_ROLE_DELETE_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__auth_role_delete_request__descriptor) \
    , NULL }


struct  _Etcdserverpb__AuthRoleGrantRequest
{
  ProtobufCMessage base;
  /*
   * name is the name of the role which will be granted the permission.
   */
  char *name;
  /*
   * perm is the permission to grant to the role.
   */
  Authpb__Permission *perm;
};
#define ETCDSERVERPB__AUTH_ROLE_GRANT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__auth_role_grant_request__descriptor) \
    , NULL, NULL }


struct  _Etcdserverpb__AuthRoleRevokePermissionRequest
{
  ProtobufCMessage base;
  char *role;
  char *key;
};
#define ETCDSERVERPB__AUTH_ROLE_REVOKE_PERMISSION_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__auth_role_revoke_permission_request__descriptor) \
    , NULL, NULL }


struct  _Etcdserverpb__AuthEnableResponse
{
  ProtobufCMessage base;
  Etcdserverpb__ResponseHeader *header;
};
#define ETCDSERVERPB__AUTH_ENABLE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__auth_enable_response__descriptor) \
    , NULL }


struct  _Etcdserverpb__AuthDisableResponse
{
  ProtobufCMessage base;
  Etcdserverpb__ResponseHeader *header;
};
#define ETCDSERVERPB__AUTH_DISABLE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__auth_disable_response__descriptor) \
    , NULL }


struct  _Etcdserverpb__AuthenticateResponse
{
  ProtobufCMessage base;
  Etcdserverpb__ResponseHeader *header;
  /*
   * token is an authorized token that can be used in succeeding RPCs
   */
  char *token;
};
#define ETCDSERVERPB__AUTHENTICATE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__authenticate_response__descriptor) \
    , NULL, NULL }


struct  _Etcdserverpb__AuthUserAddResponse
{
  ProtobufCMessage base;
  Etcdserverpb__ResponseHeader *header;
};
#define ETCDSERVERPB__AUTH_USER_ADD_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__auth_user_add_response__descriptor) \
    , NULL }


struct  _Etcdserverpb__AuthUserGetResponse
{
  ProtobufCMessage base;
  Etcdserverpb__ResponseHeader *header;
  size_t n_roles;
  char **roles;
};
#define ETCDSERVERPB__AUTH_USER_GET_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__auth_user_get_response__descriptor) \
    , NULL, 0,NULL }


struct  _Etcdserverpb__AuthUserDeleteResponse
{
  ProtobufCMessage base;
  Etcdserverpb__ResponseHeader *header;
};
#define ETCDSERVERPB__AUTH_USER_DELETE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__auth_user_delete_response__descriptor) \
    , NULL }


struct  _Etcdserverpb__AuthUserChangePasswordResponse
{
  ProtobufCMessage base;
  Etcdserverpb__ResponseHeader *header;
};
#define ETCDSERVERPB__AUTH_USER_CHANGE_PASSWORD_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__auth_user_change_password_response__descriptor) \
    , NULL }


struct  _Etcdserverpb__AuthUserGrantResponse
{
  ProtobufCMessage base;
  Etcdserverpb__ResponseHeader *header;
};
#define ETCDSERVERPB__AUTH_USER_GRANT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__auth_user_grant_response__descriptor) \
    , NULL }


struct  _Etcdserverpb__AuthUserRevokeRoleResponse
{
  ProtobufCMessage base;
  Etcdserverpb__ResponseHeader *header;
};
#define ETCDSERVERPB__AUTH_USER_REVOKE_ROLE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__auth_user_revoke_role_response__descriptor) \
    , NULL }


struct  _Etcdserverpb__AuthRoleAddResponse
{
  ProtobufCMessage base;
  Etcdserverpb__ResponseHeader *header;
};
#define ETCDSERVERPB__AUTH_ROLE_ADD_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__auth_role_add_response__descriptor) \
    , NULL }


struct  _Etcdserverpb__AuthRoleGetResponse
{
  ProtobufCMessage base;
  Etcdserverpb__ResponseHeader *header;
  size_t n_perm;
  Authpb__Permission **perm;
};
#define ETCDSERVERPB__AUTH_ROLE_GET_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__auth_role_get_response__descriptor) \
    , NULL, 0,NULL }


struct  _Etcdserverpb__AuthRoleDeleteResponse
{
  ProtobufCMessage base;
  Etcdserverpb__ResponseHeader *header;
};
#define ETCDSERVERPB__AUTH_ROLE_DELETE_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__auth_role_delete_response__descriptor) \
    , NULL }


struct  _Etcdserverpb__AuthRoleGrantResponse
{
  ProtobufCMessage base;
  Etcdserverpb__ResponseHeader *header;
};
#define ETCDSERVERPB__AUTH_ROLE_GRANT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__auth_role_grant_response__descriptor) \
    , NULL }


struct  _Etcdserverpb__AuthRoleRevokePermissionResponse
{
  ProtobufCMessage base;
  Etcdserverpb__ResponseHeader *header;
};
#define ETCDSERVERPB__AUTH_ROLE_REVOKE_PERMISSION_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&etcdserverpb__auth_role_revoke_permission_response__descriptor) \
    , NULL }


/* Etcdserverpb__ResponseHeader methods */
void   etcdserverpb__response_header__init
                     (Etcdserverpb__ResponseHeader         *message);
size_t etcdserverpb__response_header__get_packed_size
                     (const Etcdserverpb__ResponseHeader   *message);
size_t etcdserverpb__response_header__pack
                     (const Etcdserverpb__ResponseHeader   *message,
                      uint8_t             *out);
size_t etcdserverpb__response_header__pack_to_buffer
                     (const Etcdserverpb__ResponseHeader   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__ResponseHeader *
       etcdserverpb__response_header__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__response_header__free_unpacked
                     (Etcdserverpb__ResponseHeader *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__RangeRequest methods */
void   etcdserverpb__range_request__init
                     (Etcdserverpb__RangeRequest         *message);
size_t etcdserverpb__range_request__get_packed_size
                     (const Etcdserverpb__RangeRequest   *message);
size_t etcdserverpb__range_request__pack
                     (const Etcdserverpb__RangeRequest   *message,
                      uint8_t             *out);
size_t etcdserverpb__range_request__pack_to_buffer
                     (const Etcdserverpb__RangeRequest   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__RangeRequest *
       etcdserverpb__range_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__range_request__free_unpacked
                     (Etcdserverpb__RangeRequest *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__RangeResponse methods */
void   etcdserverpb__range_response__init
                     (Etcdserverpb__RangeResponse         *message);
size_t etcdserverpb__range_response__get_packed_size
                     (const Etcdserverpb__RangeResponse   *message);
size_t etcdserverpb__range_response__pack
                     (const Etcdserverpb__RangeResponse   *message,
                      uint8_t             *out);
size_t etcdserverpb__range_response__pack_to_buffer
                     (const Etcdserverpb__RangeResponse   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__RangeResponse *
       etcdserverpb__range_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__range_response__free_unpacked
                     (Etcdserverpb__RangeResponse *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__PutRequest methods */
void   etcdserverpb__put_request__init
                     (Etcdserverpb__PutRequest         *message);
size_t etcdserverpb__put_request__get_packed_size
                     (const Etcdserverpb__PutRequest   *message);
size_t etcdserverpb__put_request__pack
                     (const Etcdserverpb__PutRequest   *message,
                      uint8_t             *out);
size_t etcdserverpb__put_request__pack_to_buffer
                     (const Etcdserverpb__PutRequest   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__PutRequest *
       etcdserverpb__put_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__put_request__free_unpacked
                     (Etcdserverpb__PutRequest *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__PutResponse methods */
void   etcdserverpb__put_response__init
                     (Etcdserverpb__PutResponse         *message);
size_t etcdserverpb__put_response__get_packed_size
                     (const Etcdserverpb__PutResponse   *message);
size_t etcdserverpb__put_response__pack
                     (const Etcdserverpb__PutResponse   *message,
                      uint8_t             *out);
size_t etcdserverpb__put_response__pack_to_buffer
                     (const Etcdserverpb__PutResponse   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__PutResponse *
       etcdserverpb__put_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__put_response__free_unpacked
                     (Etcdserverpb__PutResponse *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__DeleteRangeRequest methods */
void   etcdserverpb__delete_range_request__init
                     (Etcdserverpb__DeleteRangeRequest         *message);
size_t etcdserverpb__delete_range_request__get_packed_size
                     (const Etcdserverpb__DeleteRangeRequest   *message);
size_t etcdserverpb__delete_range_request__pack
                     (const Etcdserverpb__DeleteRangeRequest   *message,
                      uint8_t             *out);
size_t etcdserverpb__delete_range_request__pack_to_buffer
                     (const Etcdserverpb__DeleteRangeRequest   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__DeleteRangeRequest *
       etcdserverpb__delete_range_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__delete_range_request__free_unpacked
                     (Etcdserverpb__DeleteRangeRequest *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__DeleteRangeResponse methods */
void   etcdserverpb__delete_range_response__init
                     (Etcdserverpb__DeleteRangeResponse         *message);
size_t etcdserverpb__delete_range_response__get_packed_size
                     (const Etcdserverpb__DeleteRangeResponse   *message);
size_t etcdserverpb__delete_range_response__pack
                     (const Etcdserverpb__DeleteRangeResponse   *message,
                      uint8_t             *out);
size_t etcdserverpb__delete_range_response__pack_to_buffer
                     (const Etcdserverpb__DeleteRangeResponse   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__DeleteRangeResponse *
       etcdserverpb__delete_range_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__delete_range_response__free_unpacked
                     (Etcdserverpb__DeleteRangeResponse *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__RequestUnion methods */
void   etcdserverpb__request_union__init
                     (Etcdserverpb__RequestUnion         *message);
size_t etcdserverpb__request_union__get_packed_size
                     (const Etcdserverpb__RequestUnion   *message);
size_t etcdserverpb__request_union__pack
                     (const Etcdserverpb__RequestUnion   *message,
                      uint8_t             *out);
size_t etcdserverpb__request_union__pack_to_buffer
                     (const Etcdserverpb__RequestUnion   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__RequestUnion *
       etcdserverpb__request_union__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__request_union__free_unpacked
                     (Etcdserverpb__RequestUnion *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__ResponseUnion methods */
void   etcdserverpb__response_union__init
                     (Etcdserverpb__ResponseUnion         *message);
size_t etcdserverpb__response_union__get_packed_size
                     (const Etcdserverpb__ResponseUnion   *message);
size_t etcdserverpb__response_union__pack
                     (const Etcdserverpb__ResponseUnion   *message,
                      uint8_t             *out);
size_t etcdserverpb__response_union__pack_to_buffer
                     (const Etcdserverpb__ResponseUnion   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__ResponseUnion *
       etcdserverpb__response_union__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__response_union__free_unpacked
                     (Etcdserverpb__ResponseUnion *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__Compare methods */
void   etcdserverpb__compare__init
                     (Etcdserverpb__Compare         *message);
size_t etcdserverpb__compare__get_packed_size
                     (const Etcdserverpb__Compare   *message);
size_t etcdserverpb__compare__pack
                     (const Etcdserverpb__Compare   *message,
                      uint8_t             *out);
size_t etcdserverpb__compare__pack_to_buffer
                     (const Etcdserverpb__Compare   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__Compare *
       etcdserverpb__compare__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__compare__free_unpacked
                     (Etcdserverpb__Compare *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__TxnRequest methods */
void   etcdserverpb__txn_request__init
                     (Etcdserverpb__TxnRequest         *message);
size_t etcdserverpb__txn_request__get_packed_size
                     (const Etcdserverpb__TxnRequest   *message);
size_t etcdserverpb__txn_request__pack
                     (const Etcdserverpb__TxnRequest   *message,
                      uint8_t             *out);
size_t etcdserverpb__txn_request__pack_to_buffer
                     (const Etcdserverpb__TxnRequest   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__TxnRequest *
       etcdserverpb__txn_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__txn_request__free_unpacked
                     (Etcdserverpb__TxnRequest *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__TxnResponse methods */
void   etcdserverpb__txn_response__init
                     (Etcdserverpb__TxnResponse         *message);
size_t etcdserverpb__txn_response__get_packed_size
                     (const Etcdserverpb__TxnResponse   *message);
size_t etcdserverpb__txn_response__pack
                     (const Etcdserverpb__TxnResponse   *message,
                      uint8_t             *out);
size_t etcdserverpb__txn_response__pack_to_buffer
                     (const Etcdserverpb__TxnResponse   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__TxnResponse *
       etcdserverpb__txn_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__txn_response__free_unpacked
                     (Etcdserverpb__TxnResponse *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__CompactionRequest methods */
void   etcdserverpb__compaction_request__init
                     (Etcdserverpb__CompactionRequest         *message);
size_t etcdserverpb__compaction_request__get_packed_size
                     (const Etcdserverpb__CompactionRequest   *message);
size_t etcdserverpb__compaction_request__pack
                     (const Etcdserverpb__CompactionRequest   *message,
                      uint8_t             *out);
size_t etcdserverpb__compaction_request__pack_to_buffer
                     (const Etcdserverpb__CompactionRequest   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__CompactionRequest *
       etcdserverpb__compaction_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__compaction_request__free_unpacked
                     (Etcdserverpb__CompactionRequest *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__CompactionResponse methods */
void   etcdserverpb__compaction_response__init
                     (Etcdserverpb__CompactionResponse         *message);
size_t etcdserverpb__compaction_response__get_packed_size
                     (const Etcdserverpb__CompactionResponse   *message);
size_t etcdserverpb__compaction_response__pack
                     (const Etcdserverpb__CompactionResponse   *message,
                      uint8_t             *out);
size_t etcdserverpb__compaction_response__pack_to_buffer
                     (const Etcdserverpb__CompactionResponse   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__CompactionResponse *
       etcdserverpb__compaction_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__compaction_response__free_unpacked
                     (Etcdserverpb__CompactionResponse *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__HashRequest methods */
void   etcdserverpb__hash_request__init
                     (Etcdserverpb__HashRequest         *message);
size_t etcdserverpb__hash_request__get_packed_size
                     (const Etcdserverpb__HashRequest   *message);
size_t etcdserverpb__hash_request__pack
                     (const Etcdserverpb__HashRequest   *message,
                      uint8_t             *out);
size_t etcdserverpb__hash_request__pack_to_buffer
                     (const Etcdserverpb__HashRequest   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__HashRequest *
       etcdserverpb__hash_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__hash_request__free_unpacked
                     (Etcdserverpb__HashRequest *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__HashResponse methods */
void   etcdserverpb__hash_response__init
                     (Etcdserverpb__HashResponse         *message);
size_t etcdserverpb__hash_response__get_packed_size
                     (const Etcdserverpb__HashResponse   *message);
size_t etcdserverpb__hash_response__pack
                     (const Etcdserverpb__HashResponse   *message,
                      uint8_t             *out);
size_t etcdserverpb__hash_response__pack_to_buffer
                     (const Etcdserverpb__HashResponse   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__HashResponse *
       etcdserverpb__hash_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__hash_response__free_unpacked
                     (Etcdserverpb__HashResponse *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__SnapshotRequest methods */
void   etcdserverpb__snapshot_request__init
                     (Etcdserverpb__SnapshotRequest         *message);
size_t etcdserverpb__snapshot_request__get_packed_size
                     (const Etcdserverpb__SnapshotRequest   *message);
size_t etcdserverpb__snapshot_request__pack
                     (const Etcdserverpb__SnapshotRequest   *message,
                      uint8_t             *out);
size_t etcdserverpb__snapshot_request__pack_to_buffer
                     (const Etcdserverpb__SnapshotRequest   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__SnapshotRequest *
       etcdserverpb__snapshot_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__snapshot_request__free_unpacked
                     (Etcdserverpb__SnapshotRequest *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__SnapshotResponse methods */
void   etcdserverpb__snapshot_response__init
                     (Etcdserverpb__SnapshotResponse         *message);
size_t etcdserverpb__snapshot_response__get_packed_size
                     (const Etcdserverpb__SnapshotResponse   *message);
size_t etcdserverpb__snapshot_response__pack
                     (const Etcdserverpb__SnapshotResponse   *message,
                      uint8_t             *out);
size_t etcdserverpb__snapshot_response__pack_to_buffer
                     (const Etcdserverpb__SnapshotResponse   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__SnapshotResponse *
       etcdserverpb__snapshot_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__snapshot_response__free_unpacked
                     (Etcdserverpb__SnapshotResponse *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__WatchRequest methods */
void   etcdserverpb__watch_request__init
                     (Etcdserverpb__WatchRequest         *message);
size_t etcdserverpb__watch_request__get_packed_size
                     (const Etcdserverpb__WatchRequest   *message);
size_t etcdserverpb__watch_request__pack
                     (const Etcdserverpb__WatchRequest   *message,
                      uint8_t             *out);
size_t etcdserverpb__watch_request__pack_to_buffer
                     (const Etcdserverpb__WatchRequest   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__WatchRequest *
       etcdserverpb__watch_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__watch_request__free_unpacked
                     (Etcdserverpb__WatchRequest *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__WatchCreateRequest methods */
void   etcdserverpb__watch_create_request__init
                     (Etcdserverpb__WatchCreateRequest         *message);
size_t etcdserverpb__watch_create_request__get_packed_size
                     (const Etcdserverpb__WatchCreateRequest   *message);
size_t etcdserverpb__watch_create_request__pack
                     (const Etcdserverpb__WatchCreateRequest   *message,
                      uint8_t             *out);
size_t etcdserverpb__watch_create_request__pack_to_buffer
                     (const Etcdserverpb__WatchCreateRequest   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__WatchCreateRequest *
       etcdserverpb__watch_create_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__watch_create_request__free_unpacked
                     (Etcdserverpb__WatchCreateRequest *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__WatchCancelRequest methods */
void   etcdserverpb__watch_cancel_request__init
                     (Etcdserverpb__WatchCancelRequest         *message);
size_t etcdserverpb__watch_cancel_request__get_packed_size
                     (const Etcdserverpb__WatchCancelRequest   *message);
size_t etcdserverpb__watch_cancel_request__pack
                     (const Etcdserverpb__WatchCancelRequest   *message,
                      uint8_t             *out);
size_t etcdserverpb__watch_cancel_request__pack_to_buffer
                     (const Etcdserverpb__WatchCancelRequest   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__WatchCancelRequest *
       etcdserverpb__watch_cancel_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__watch_cancel_request__free_unpacked
                     (Etcdserverpb__WatchCancelRequest *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__WatchResponse methods */
void   etcdserverpb__watch_response__init
                     (Etcdserverpb__WatchResponse         *message);
size_t etcdserverpb__watch_response__get_packed_size
                     (const Etcdserverpb__WatchResponse   *message);
size_t etcdserverpb__watch_response__pack
                     (const Etcdserverpb__WatchResponse   *message,
                      uint8_t             *out);
size_t etcdserverpb__watch_response__pack_to_buffer
                     (const Etcdserverpb__WatchResponse   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__WatchResponse *
       etcdserverpb__watch_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__watch_response__free_unpacked
                     (Etcdserverpb__WatchResponse *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__LeaseGrantRequest methods */
void   etcdserverpb__lease_grant_request__init
                     (Etcdserverpb__LeaseGrantRequest         *message);
size_t etcdserverpb__lease_grant_request__get_packed_size
                     (const Etcdserverpb__LeaseGrantRequest   *message);
size_t etcdserverpb__lease_grant_request__pack
                     (const Etcdserverpb__LeaseGrantRequest   *message,
                      uint8_t             *out);
size_t etcdserverpb__lease_grant_request__pack_to_buffer
                     (const Etcdserverpb__LeaseGrantRequest   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__LeaseGrantRequest *
       etcdserverpb__lease_grant_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__lease_grant_request__free_unpacked
                     (Etcdserverpb__LeaseGrantRequest *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__LeaseGrantResponse methods */
void   etcdserverpb__lease_grant_response__init
                     (Etcdserverpb__LeaseGrantResponse         *message);
size_t etcdserverpb__lease_grant_response__get_packed_size
                     (const Etcdserverpb__LeaseGrantResponse   *message);
size_t etcdserverpb__lease_grant_response__pack
                     (const Etcdserverpb__LeaseGrantResponse   *message,
                      uint8_t             *out);
size_t etcdserverpb__lease_grant_response__pack_to_buffer
                     (const Etcdserverpb__LeaseGrantResponse   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__LeaseGrantResponse *
       etcdserverpb__lease_grant_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__lease_grant_response__free_unpacked
                     (Etcdserverpb__LeaseGrantResponse *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__LeaseRevokeRequest methods */
void   etcdserverpb__lease_revoke_request__init
                     (Etcdserverpb__LeaseRevokeRequest         *message);
size_t etcdserverpb__lease_revoke_request__get_packed_size
                     (const Etcdserverpb__LeaseRevokeRequest   *message);
size_t etcdserverpb__lease_revoke_request__pack
                     (const Etcdserverpb__LeaseRevokeRequest   *message,
                      uint8_t             *out);
size_t etcdserverpb__lease_revoke_request__pack_to_buffer
                     (const Etcdserverpb__LeaseRevokeRequest   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__LeaseRevokeRequest *
       etcdserverpb__lease_revoke_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__lease_revoke_request__free_unpacked
                     (Etcdserverpb__LeaseRevokeRequest *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__LeaseRevokeResponse methods */
void   etcdserverpb__lease_revoke_response__init
                     (Etcdserverpb__LeaseRevokeResponse         *message);
size_t etcdserverpb__lease_revoke_response__get_packed_size
                     (const Etcdserverpb__LeaseRevokeResponse   *message);
size_t etcdserverpb__lease_revoke_response__pack
                     (const Etcdserverpb__LeaseRevokeResponse   *message,
                      uint8_t             *out);
size_t etcdserverpb__lease_revoke_response__pack_to_buffer
                     (const Etcdserverpb__LeaseRevokeResponse   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__LeaseRevokeResponse *
       etcdserverpb__lease_revoke_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__lease_revoke_response__free_unpacked
                     (Etcdserverpb__LeaseRevokeResponse *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__LeaseKeepAliveRequest methods */
void   etcdserverpb__lease_keep_alive_request__init
                     (Etcdserverpb__LeaseKeepAliveRequest         *message);
size_t etcdserverpb__lease_keep_alive_request__get_packed_size
                     (const Etcdserverpb__LeaseKeepAliveRequest   *message);
size_t etcdserverpb__lease_keep_alive_request__pack
                     (const Etcdserverpb__LeaseKeepAliveRequest   *message,
                      uint8_t             *out);
size_t etcdserverpb__lease_keep_alive_request__pack_to_buffer
                     (const Etcdserverpb__LeaseKeepAliveRequest   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__LeaseKeepAliveRequest *
       etcdserverpb__lease_keep_alive_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__lease_keep_alive_request__free_unpacked
                     (Etcdserverpb__LeaseKeepAliveRequest *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__LeaseKeepAliveResponse methods */
void   etcdserverpb__lease_keep_alive_response__init
                     (Etcdserverpb__LeaseKeepAliveResponse         *message);
size_t etcdserverpb__lease_keep_alive_response__get_packed_size
                     (const Etcdserverpb__LeaseKeepAliveResponse   *message);
size_t etcdserverpb__lease_keep_alive_response__pack
                     (const Etcdserverpb__LeaseKeepAliveResponse   *message,
                      uint8_t             *out);
size_t etcdserverpb__lease_keep_alive_response__pack_to_buffer
                     (const Etcdserverpb__LeaseKeepAliveResponse   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__LeaseKeepAliveResponse *
       etcdserverpb__lease_keep_alive_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__lease_keep_alive_response__free_unpacked
                     (Etcdserverpb__LeaseKeepAliveResponse *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__Member methods */
void   etcdserverpb__member__init
                     (Etcdserverpb__Member         *message);
size_t etcdserverpb__member__get_packed_size
                     (const Etcdserverpb__Member   *message);
size_t etcdserverpb__member__pack
                     (const Etcdserverpb__Member   *message,
                      uint8_t             *out);
size_t etcdserverpb__member__pack_to_buffer
                     (const Etcdserverpb__Member   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__Member *
       etcdserverpb__member__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__member__free_unpacked
                     (Etcdserverpb__Member *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__MemberAddRequest methods */
void   etcdserverpb__member_add_request__init
                     (Etcdserverpb__MemberAddRequest         *message);
size_t etcdserverpb__member_add_request__get_packed_size
                     (const Etcdserverpb__MemberAddRequest   *message);
size_t etcdserverpb__member_add_request__pack
                     (const Etcdserverpb__MemberAddRequest   *message,
                      uint8_t             *out);
size_t etcdserverpb__member_add_request__pack_to_buffer
                     (const Etcdserverpb__MemberAddRequest   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__MemberAddRequest *
       etcdserverpb__member_add_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__member_add_request__free_unpacked
                     (Etcdserverpb__MemberAddRequest *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__MemberAddResponse methods */
void   etcdserverpb__member_add_response__init
                     (Etcdserverpb__MemberAddResponse         *message);
size_t etcdserverpb__member_add_response__get_packed_size
                     (const Etcdserverpb__MemberAddResponse   *message);
size_t etcdserverpb__member_add_response__pack
                     (const Etcdserverpb__MemberAddResponse   *message,
                      uint8_t             *out);
size_t etcdserverpb__member_add_response__pack_to_buffer
                     (const Etcdserverpb__MemberAddResponse   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__MemberAddResponse *
       etcdserverpb__member_add_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__member_add_response__free_unpacked
                     (Etcdserverpb__MemberAddResponse *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__MemberRemoveRequest methods */
void   etcdserverpb__member_remove_request__init
                     (Etcdserverpb__MemberRemoveRequest         *message);
size_t etcdserverpb__member_remove_request__get_packed_size
                     (const Etcdserverpb__MemberRemoveRequest   *message);
size_t etcdserverpb__member_remove_request__pack
                     (const Etcdserverpb__MemberRemoveRequest   *message,
                      uint8_t             *out);
size_t etcdserverpb__member_remove_request__pack_to_buffer
                     (const Etcdserverpb__MemberRemoveRequest   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__MemberRemoveRequest *
       etcdserverpb__member_remove_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__member_remove_request__free_unpacked
                     (Etcdserverpb__MemberRemoveRequest *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__MemberRemoveResponse methods */
void   etcdserverpb__member_remove_response__init
                     (Etcdserverpb__MemberRemoveResponse         *message);
size_t etcdserverpb__member_remove_response__get_packed_size
                     (const Etcdserverpb__MemberRemoveResponse   *message);
size_t etcdserverpb__member_remove_response__pack
                     (const Etcdserverpb__MemberRemoveResponse   *message,
                      uint8_t             *out);
size_t etcdserverpb__member_remove_response__pack_to_buffer
                     (const Etcdserverpb__MemberRemoveResponse   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__MemberRemoveResponse *
       etcdserverpb__member_remove_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__member_remove_response__free_unpacked
                     (Etcdserverpb__MemberRemoveResponse *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__MemberUpdateRequest methods */
void   etcdserverpb__member_update_request__init
                     (Etcdserverpb__MemberUpdateRequest         *message);
size_t etcdserverpb__member_update_request__get_packed_size
                     (const Etcdserverpb__MemberUpdateRequest   *message);
size_t etcdserverpb__member_update_request__pack
                     (const Etcdserverpb__MemberUpdateRequest   *message,
                      uint8_t             *out);
size_t etcdserverpb__member_update_request__pack_to_buffer
                     (const Etcdserverpb__MemberUpdateRequest   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__MemberUpdateRequest *
       etcdserverpb__member_update_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__member_update_request__free_unpacked
                     (Etcdserverpb__MemberUpdateRequest *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__MemberUpdateResponse methods */
void   etcdserverpb__member_update_response__init
                     (Etcdserverpb__MemberUpdateResponse         *message);
size_t etcdserverpb__member_update_response__get_packed_size
                     (const Etcdserverpb__MemberUpdateResponse   *message);
size_t etcdserverpb__member_update_response__pack
                     (const Etcdserverpb__MemberUpdateResponse   *message,
                      uint8_t             *out);
size_t etcdserverpb__member_update_response__pack_to_buffer
                     (const Etcdserverpb__MemberUpdateResponse   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__MemberUpdateResponse *
       etcdserverpb__member_update_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__member_update_response__free_unpacked
                     (Etcdserverpb__MemberUpdateResponse *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__MemberListRequest methods */
void   etcdserverpb__member_list_request__init
                     (Etcdserverpb__MemberListRequest         *message);
size_t etcdserverpb__member_list_request__get_packed_size
                     (const Etcdserverpb__MemberListRequest   *message);
size_t etcdserverpb__member_list_request__pack
                     (const Etcdserverpb__MemberListRequest   *message,
                      uint8_t             *out);
size_t etcdserverpb__member_list_request__pack_to_buffer
                     (const Etcdserverpb__MemberListRequest   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__MemberListRequest *
       etcdserverpb__member_list_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__member_list_request__free_unpacked
                     (Etcdserverpb__MemberListRequest *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__MemberListResponse methods */
void   etcdserverpb__member_list_response__init
                     (Etcdserverpb__MemberListResponse         *message);
size_t etcdserverpb__member_list_response__get_packed_size
                     (const Etcdserverpb__MemberListResponse   *message);
size_t etcdserverpb__member_list_response__pack
                     (const Etcdserverpb__MemberListResponse   *message,
                      uint8_t             *out);
size_t etcdserverpb__member_list_response__pack_to_buffer
                     (const Etcdserverpb__MemberListResponse   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__MemberListResponse *
       etcdserverpb__member_list_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__member_list_response__free_unpacked
                     (Etcdserverpb__MemberListResponse *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__DefragmentRequest methods */
void   etcdserverpb__defragment_request__init
                     (Etcdserverpb__DefragmentRequest         *message);
size_t etcdserverpb__defragment_request__get_packed_size
                     (const Etcdserverpb__DefragmentRequest   *message);
size_t etcdserverpb__defragment_request__pack
                     (const Etcdserverpb__DefragmentRequest   *message,
                      uint8_t             *out);
size_t etcdserverpb__defragment_request__pack_to_buffer
                     (const Etcdserverpb__DefragmentRequest   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__DefragmentRequest *
       etcdserverpb__defragment_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__defragment_request__free_unpacked
                     (Etcdserverpb__DefragmentRequest *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__DefragmentResponse methods */
void   etcdserverpb__defragment_response__init
                     (Etcdserverpb__DefragmentResponse         *message);
size_t etcdserverpb__defragment_response__get_packed_size
                     (const Etcdserverpb__DefragmentResponse   *message);
size_t etcdserverpb__defragment_response__pack
                     (const Etcdserverpb__DefragmentResponse   *message,
                      uint8_t             *out);
size_t etcdserverpb__defragment_response__pack_to_buffer
                     (const Etcdserverpb__DefragmentResponse   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__DefragmentResponse *
       etcdserverpb__defragment_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__defragment_response__free_unpacked
                     (Etcdserverpb__DefragmentResponse *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__AlarmRequest methods */
void   etcdserverpb__alarm_request__init
                     (Etcdserverpb__AlarmRequest         *message);
size_t etcdserverpb__alarm_request__get_packed_size
                     (const Etcdserverpb__AlarmRequest   *message);
size_t etcdserverpb__alarm_request__pack
                     (const Etcdserverpb__AlarmRequest   *message,
                      uint8_t             *out);
size_t etcdserverpb__alarm_request__pack_to_buffer
                     (const Etcdserverpb__AlarmRequest   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__AlarmRequest *
       etcdserverpb__alarm_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__alarm_request__free_unpacked
                     (Etcdserverpb__AlarmRequest *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__AlarmMember methods */
void   etcdserverpb__alarm_member__init
                     (Etcdserverpb__AlarmMember         *message);
size_t etcdserverpb__alarm_member__get_packed_size
                     (const Etcdserverpb__AlarmMember   *message);
size_t etcdserverpb__alarm_member__pack
                     (const Etcdserverpb__AlarmMember   *message,
                      uint8_t             *out);
size_t etcdserverpb__alarm_member__pack_to_buffer
                     (const Etcdserverpb__AlarmMember   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__AlarmMember *
       etcdserverpb__alarm_member__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__alarm_member__free_unpacked
                     (Etcdserverpb__AlarmMember *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__AlarmResponse methods */
void   etcdserverpb__alarm_response__init
                     (Etcdserverpb__AlarmResponse         *message);
size_t etcdserverpb__alarm_response__get_packed_size
                     (const Etcdserverpb__AlarmResponse   *message);
size_t etcdserverpb__alarm_response__pack
                     (const Etcdserverpb__AlarmResponse   *message,
                      uint8_t             *out);
size_t etcdserverpb__alarm_response__pack_to_buffer
                     (const Etcdserverpb__AlarmResponse   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__AlarmResponse *
       etcdserverpb__alarm_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__alarm_response__free_unpacked
                     (Etcdserverpb__AlarmResponse *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__StatusRequest methods */
void   etcdserverpb__status_request__init
                     (Etcdserverpb__StatusRequest         *message);
size_t etcdserverpb__status_request__get_packed_size
                     (const Etcdserverpb__StatusRequest   *message);
size_t etcdserverpb__status_request__pack
                     (const Etcdserverpb__StatusRequest   *message,
                      uint8_t             *out);
size_t etcdserverpb__status_request__pack_to_buffer
                     (const Etcdserverpb__StatusRequest   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__StatusRequest *
       etcdserverpb__status_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__status_request__free_unpacked
                     (Etcdserverpb__StatusRequest *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__StatusResponse methods */
void   etcdserverpb__status_response__init
                     (Etcdserverpb__StatusResponse         *message);
size_t etcdserverpb__status_response__get_packed_size
                     (const Etcdserverpb__StatusResponse   *message);
size_t etcdserverpb__status_response__pack
                     (const Etcdserverpb__StatusResponse   *message,
                      uint8_t             *out);
size_t etcdserverpb__status_response__pack_to_buffer
                     (const Etcdserverpb__StatusResponse   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__StatusResponse *
       etcdserverpb__status_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__status_response__free_unpacked
                     (Etcdserverpb__StatusResponse *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__AuthEnableRequest methods */
void   etcdserverpb__auth_enable_request__init
                     (Etcdserverpb__AuthEnableRequest         *message);
size_t etcdserverpb__auth_enable_request__get_packed_size
                     (const Etcdserverpb__AuthEnableRequest   *message);
size_t etcdserverpb__auth_enable_request__pack
                     (const Etcdserverpb__AuthEnableRequest   *message,
                      uint8_t             *out);
size_t etcdserverpb__auth_enable_request__pack_to_buffer
                     (const Etcdserverpb__AuthEnableRequest   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__AuthEnableRequest *
       etcdserverpb__auth_enable_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__auth_enable_request__free_unpacked
                     (Etcdserverpb__AuthEnableRequest *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__AuthDisableRequest methods */
void   etcdserverpb__auth_disable_request__init
                     (Etcdserverpb__AuthDisableRequest         *message);
size_t etcdserverpb__auth_disable_request__get_packed_size
                     (const Etcdserverpb__AuthDisableRequest   *message);
size_t etcdserverpb__auth_disable_request__pack
                     (const Etcdserverpb__AuthDisableRequest   *message,
                      uint8_t             *out);
size_t etcdserverpb__auth_disable_request__pack_to_buffer
                     (const Etcdserverpb__AuthDisableRequest   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__AuthDisableRequest *
       etcdserverpb__auth_disable_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__auth_disable_request__free_unpacked
                     (Etcdserverpb__AuthDisableRequest *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__AuthenticateRequest methods */
void   etcdserverpb__authenticate_request__init
                     (Etcdserverpb__AuthenticateRequest         *message);
size_t etcdserverpb__authenticate_request__get_packed_size
                     (const Etcdserverpb__AuthenticateRequest   *message);
size_t etcdserverpb__authenticate_request__pack
                     (const Etcdserverpb__AuthenticateRequest   *message,
                      uint8_t             *out);
size_t etcdserverpb__authenticate_request__pack_to_buffer
                     (const Etcdserverpb__AuthenticateRequest   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__AuthenticateRequest *
       etcdserverpb__authenticate_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__authenticate_request__free_unpacked
                     (Etcdserverpb__AuthenticateRequest *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__AuthUserAddRequest methods */
void   etcdserverpb__auth_user_add_request__init
                     (Etcdserverpb__AuthUserAddRequest         *message);
size_t etcdserverpb__auth_user_add_request__get_packed_size
                     (const Etcdserverpb__AuthUserAddRequest   *message);
size_t etcdserverpb__auth_user_add_request__pack
                     (const Etcdserverpb__AuthUserAddRequest   *message,
                      uint8_t             *out);
size_t etcdserverpb__auth_user_add_request__pack_to_buffer
                     (const Etcdserverpb__AuthUserAddRequest   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__AuthUserAddRequest *
       etcdserverpb__auth_user_add_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__auth_user_add_request__free_unpacked
                     (Etcdserverpb__AuthUserAddRequest *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__AuthUserGetRequest methods */
void   etcdserverpb__auth_user_get_request__init
                     (Etcdserverpb__AuthUserGetRequest         *message);
size_t etcdserverpb__auth_user_get_request__get_packed_size
                     (const Etcdserverpb__AuthUserGetRequest   *message);
size_t etcdserverpb__auth_user_get_request__pack
                     (const Etcdserverpb__AuthUserGetRequest   *message,
                      uint8_t             *out);
size_t etcdserverpb__auth_user_get_request__pack_to_buffer
                     (const Etcdserverpb__AuthUserGetRequest   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__AuthUserGetRequest *
       etcdserverpb__auth_user_get_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__auth_user_get_request__free_unpacked
                     (Etcdserverpb__AuthUserGetRequest *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__AuthUserDeleteRequest methods */
void   etcdserverpb__auth_user_delete_request__init
                     (Etcdserverpb__AuthUserDeleteRequest         *message);
size_t etcdserverpb__auth_user_delete_request__get_packed_size
                     (const Etcdserverpb__AuthUserDeleteRequest   *message);
size_t etcdserverpb__auth_user_delete_request__pack
                     (const Etcdserverpb__AuthUserDeleteRequest   *message,
                      uint8_t             *out);
size_t etcdserverpb__auth_user_delete_request__pack_to_buffer
                     (const Etcdserverpb__AuthUserDeleteRequest   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__AuthUserDeleteRequest *
       etcdserverpb__auth_user_delete_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__auth_user_delete_request__free_unpacked
                     (Etcdserverpb__AuthUserDeleteRequest *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__AuthUserChangePasswordRequest methods */
void   etcdserverpb__auth_user_change_password_request__init
                     (Etcdserverpb__AuthUserChangePasswordRequest         *message);
size_t etcdserverpb__auth_user_change_password_request__get_packed_size
                     (const Etcdserverpb__AuthUserChangePasswordRequest   *message);
size_t etcdserverpb__auth_user_change_password_request__pack
                     (const Etcdserverpb__AuthUserChangePasswordRequest   *message,
                      uint8_t             *out);
size_t etcdserverpb__auth_user_change_password_request__pack_to_buffer
                     (const Etcdserverpb__AuthUserChangePasswordRequest   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__AuthUserChangePasswordRequest *
       etcdserverpb__auth_user_change_password_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__auth_user_change_password_request__free_unpacked
                     (Etcdserverpb__AuthUserChangePasswordRequest *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__AuthUserGrantRequest methods */
void   etcdserverpb__auth_user_grant_request__init
                     (Etcdserverpb__AuthUserGrantRequest         *message);
size_t etcdserverpb__auth_user_grant_request__get_packed_size
                     (const Etcdserverpb__AuthUserGrantRequest   *message);
size_t etcdserverpb__auth_user_grant_request__pack
                     (const Etcdserverpb__AuthUserGrantRequest   *message,
                      uint8_t             *out);
size_t etcdserverpb__auth_user_grant_request__pack_to_buffer
                     (const Etcdserverpb__AuthUserGrantRequest   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__AuthUserGrantRequest *
       etcdserverpb__auth_user_grant_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__auth_user_grant_request__free_unpacked
                     (Etcdserverpb__AuthUserGrantRequest *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__AuthUserRevokeRoleRequest methods */
void   etcdserverpb__auth_user_revoke_role_request__init
                     (Etcdserverpb__AuthUserRevokeRoleRequest         *message);
size_t etcdserverpb__auth_user_revoke_role_request__get_packed_size
                     (const Etcdserverpb__AuthUserRevokeRoleRequest   *message);
size_t etcdserverpb__auth_user_revoke_role_request__pack
                     (const Etcdserverpb__AuthUserRevokeRoleRequest   *message,
                      uint8_t             *out);
size_t etcdserverpb__auth_user_revoke_role_request__pack_to_buffer
                     (const Etcdserverpb__AuthUserRevokeRoleRequest   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__AuthUserRevokeRoleRequest *
       etcdserverpb__auth_user_revoke_role_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__auth_user_revoke_role_request__free_unpacked
                     (Etcdserverpb__AuthUserRevokeRoleRequest *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__AuthRoleAddRequest methods */
void   etcdserverpb__auth_role_add_request__init
                     (Etcdserverpb__AuthRoleAddRequest         *message);
size_t etcdserverpb__auth_role_add_request__get_packed_size
                     (const Etcdserverpb__AuthRoleAddRequest   *message);
size_t etcdserverpb__auth_role_add_request__pack
                     (const Etcdserverpb__AuthRoleAddRequest   *message,
                      uint8_t             *out);
size_t etcdserverpb__auth_role_add_request__pack_to_buffer
                     (const Etcdserverpb__AuthRoleAddRequest   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__AuthRoleAddRequest *
       etcdserverpb__auth_role_add_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__auth_role_add_request__free_unpacked
                     (Etcdserverpb__AuthRoleAddRequest *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__AuthRoleGetRequest methods */
void   etcdserverpb__auth_role_get_request__init
                     (Etcdserverpb__AuthRoleGetRequest         *message);
size_t etcdserverpb__auth_role_get_request__get_packed_size
                     (const Etcdserverpb__AuthRoleGetRequest   *message);
size_t etcdserverpb__auth_role_get_request__pack
                     (const Etcdserverpb__AuthRoleGetRequest   *message,
                      uint8_t             *out);
size_t etcdserverpb__auth_role_get_request__pack_to_buffer
                     (const Etcdserverpb__AuthRoleGetRequest   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__AuthRoleGetRequest *
       etcdserverpb__auth_role_get_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__auth_role_get_request__free_unpacked
                     (Etcdserverpb__AuthRoleGetRequest *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__AuthRoleDeleteRequest methods */
void   etcdserverpb__auth_role_delete_request__init
                     (Etcdserverpb__AuthRoleDeleteRequest         *message);
size_t etcdserverpb__auth_role_delete_request__get_packed_size
                     (const Etcdserverpb__AuthRoleDeleteRequest   *message);
size_t etcdserverpb__auth_role_delete_request__pack
                     (const Etcdserverpb__AuthRoleDeleteRequest   *message,
                      uint8_t             *out);
size_t etcdserverpb__auth_role_delete_request__pack_to_buffer
                     (const Etcdserverpb__AuthRoleDeleteRequest   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__AuthRoleDeleteRequest *
       etcdserverpb__auth_role_delete_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__auth_role_delete_request__free_unpacked
                     (Etcdserverpb__AuthRoleDeleteRequest *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__AuthRoleGrantRequest methods */
void   etcdserverpb__auth_role_grant_request__init
                     (Etcdserverpb__AuthRoleGrantRequest         *message);
size_t etcdserverpb__auth_role_grant_request__get_packed_size
                     (const Etcdserverpb__AuthRoleGrantRequest   *message);
size_t etcdserverpb__auth_role_grant_request__pack
                     (const Etcdserverpb__AuthRoleGrantRequest   *message,
                      uint8_t             *out);
size_t etcdserverpb__auth_role_grant_request__pack_to_buffer
                     (const Etcdserverpb__AuthRoleGrantRequest   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__AuthRoleGrantRequest *
       etcdserverpb__auth_role_grant_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__auth_role_grant_request__free_unpacked
                     (Etcdserverpb__AuthRoleGrantRequest *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__AuthRoleRevokePermissionRequest methods */
void   etcdserverpb__auth_role_revoke_permission_request__init
                     (Etcdserverpb__AuthRoleRevokePermissionRequest         *message);
size_t etcdserverpb__auth_role_revoke_permission_request__get_packed_size
                     (const Etcdserverpb__AuthRoleRevokePermissionRequest   *message);
size_t etcdserverpb__auth_role_revoke_permission_request__pack
                     (const Etcdserverpb__AuthRoleRevokePermissionRequest   *message,
                      uint8_t             *out);
size_t etcdserverpb__auth_role_revoke_permission_request__pack_to_buffer
                     (const Etcdserverpb__AuthRoleRevokePermissionRequest   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__AuthRoleRevokePermissionRequest *
       etcdserverpb__auth_role_revoke_permission_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__auth_role_revoke_permission_request__free_unpacked
                     (Etcdserverpb__AuthRoleRevokePermissionRequest *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__AuthEnableResponse methods */
void   etcdserverpb__auth_enable_response__init
                     (Etcdserverpb__AuthEnableResponse         *message);
size_t etcdserverpb__auth_enable_response__get_packed_size
                     (const Etcdserverpb__AuthEnableResponse   *message);
size_t etcdserverpb__auth_enable_response__pack
                     (const Etcdserverpb__AuthEnableResponse   *message,
                      uint8_t             *out);
size_t etcdserverpb__auth_enable_response__pack_to_buffer
                     (const Etcdserverpb__AuthEnableResponse   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__AuthEnableResponse *
       etcdserverpb__auth_enable_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__auth_enable_response__free_unpacked
                     (Etcdserverpb__AuthEnableResponse *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__AuthDisableResponse methods */
void   etcdserverpb__auth_disable_response__init
                     (Etcdserverpb__AuthDisableResponse         *message);
size_t etcdserverpb__auth_disable_response__get_packed_size
                     (const Etcdserverpb__AuthDisableResponse   *message);
size_t etcdserverpb__auth_disable_response__pack
                     (const Etcdserverpb__AuthDisableResponse   *message,
                      uint8_t             *out);
size_t etcdserverpb__auth_disable_response__pack_to_buffer
                     (const Etcdserverpb__AuthDisableResponse   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__AuthDisableResponse *
       etcdserverpb__auth_disable_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__auth_disable_response__free_unpacked
                     (Etcdserverpb__AuthDisableResponse *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__AuthenticateResponse methods */
void   etcdserverpb__authenticate_response__init
                     (Etcdserverpb__AuthenticateResponse         *message);
size_t etcdserverpb__authenticate_response__get_packed_size
                     (const Etcdserverpb__AuthenticateResponse   *message);
size_t etcdserverpb__authenticate_response__pack
                     (const Etcdserverpb__AuthenticateResponse   *message,
                      uint8_t             *out);
size_t etcdserverpb__authenticate_response__pack_to_buffer
                     (const Etcdserverpb__AuthenticateResponse   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__AuthenticateResponse *
       etcdserverpb__authenticate_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__authenticate_response__free_unpacked
                     (Etcdserverpb__AuthenticateResponse *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__AuthUserAddResponse methods */
void   etcdserverpb__auth_user_add_response__init
                     (Etcdserverpb__AuthUserAddResponse         *message);
size_t etcdserverpb__auth_user_add_response__get_packed_size
                     (const Etcdserverpb__AuthUserAddResponse   *message);
size_t etcdserverpb__auth_user_add_response__pack
                     (const Etcdserverpb__AuthUserAddResponse   *message,
                      uint8_t             *out);
size_t etcdserverpb__auth_user_add_response__pack_to_buffer
                     (const Etcdserverpb__AuthUserAddResponse   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__AuthUserAddResponse *
       etcdserverpb__auth_user_add_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__auth_user_add_response__free_unpacked
                     (Etcdserverpb__AuthUserAddResponse *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__AuthUserGetResponse methods */
void   etcdserverpb__auth_user_get_response__init
                     (Etcdserverpb__AuthUserGetResponse         *message);
size_t etcdserverpb__auth_user_get_response__get_packed_size
                     (const Etcdserverpb__AuthUserGetResponse   *message);
size_t etcdserverpb__auth_user_get_response__pack
                     (const Etcdserverpb__AuthUserGetResponse   *message,
                      uint8_t             *out);
size_t etcdserverpb__auth_user_get_response__pack_to_buffer
                     (const Etcdserverpb__AuthUserGetResponse   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__AuthUserGetResponse *
       etcdserverpb__auth_user_get_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__auth_user_get_response__free_unpacked
                     (Etcdserverpb__AuthUserGetResponse *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__AuthUserDeleteResponse methods */
void   etcdserverpb__auth_user_delete_response__init
                     (Etcdserverpb__AuthUserDeleteResponse         *message);
size_t etcdserverpb__auth_user_delete_response__get_packed_size
                     (const Etcdserverpb__AuthUserDeleteResponse   *message);
size_t etcdserverpb__auth_user_delete_response__pack
                     (const Etcdserverpb__AuthUserDeleteResponse   *message,
                      uint8_t             *out);
size_t etcdserverpb__auth_user_delete_response__pack_to_buffer
                     (const Etcdserverpb__AuthUserDeleteResponse   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__AuthUserDeleteResponse *
       etcdserverpb__auth_user_delete_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__auth_user_delete_response__free_unpacked
                     (Etcdserverpb__AuthUserDeleteResponse *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__AuthUserChangePasswordResponse methods */
void   etcdserverpb__auth_user_change_password_response__init
                     (Etcdserverpb__AuthUserChangePasswordResponse         *message);
size_t etcdserverpb__auth_user_change_password_response__get_packed_size
                     (const Etcdserverpb__AuthUserChangePasswordResponse   *message);
size_t etcdserverpb__auth_user_change_password_response__pack
                     (const Etcdserverpb__AuthUserChangePasswordResponse   *message,
                      uint8_t             *out);
size_t etcdserverpb__auth_user_change_password_response__pack_to_buffer
                     (const Etcdserverpb__AuthUserChangePasswordResponse   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__AuthUserChangePasswordResponse *
       etcdserverpb__auth_user_change_password_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__auth_user_change_password_response__free_unpacked
                     (Etcdserverpb__AuthUserChangePasswordResponse *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__AuthUserGrantResponse methods */
void   etcdserverpb__auth_user_grant_response__init
                     (Etcdserverpb__AuthUserGrantResponse         *message);
size_t etcdserverpb__auth_user_grant_response__get_packed_size
                     (const Etcdserverpb__AuthUserGrantResponse   *message);
size_t etcdserverpb__auth_user_grant_response__pack
                     (const Etcdserverpb__AuthUserGrantResponse   *message,
                      uint8_t             *out);
size_t etcdserverpb__auth_user_grant_response__pack_to_buffer
                     (const Etcdserverpb__AuthUserGrantResponse   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__AuthUserGrantResponse *
       etcdserverpb__auth_user_grant_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__auth_user_grant_response__free_unpacked
                     (Etcdserverpb__AuthUserGrantResponse *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__AuthUserRevokeRoleResponse methods */
void   etcdserverpb__auth_user_revoke_role_response__init
                     (Etcdserverpb__AuthUserRevokeRoleResponse         *message);
size_t etcdserverpb__auth_user_revoke_role_response__get_packed_size
                     (const Etcdserverpb__AuthUserRevokeRoleResponse   *message);
size_t etcdserverpb__auth_user_revoke_role_response__pack
                     (const Etcdserverpb__AuthUserRevokeRoleResponse   *message,
                      uint8_t             *out);
size_t etcdserverpb__auth_user_revoke_role_response__pack_to_buffer
                     (const Etcdserverpb__AuthUserRevokeRoleResponse   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__AuthUserRevokeRoleResponse *
       etcdserverpb__auth_user_revoke_role_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__auth_user_revoke_role_response__free_unpacked
                     (Etcdserverpb__AuthUserRevokeRoleResponse *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__AuthRoleAddResponse methods */
void   etcdserverpb__auth_role_add_response__init
                     (Etcdserverpb__AuthRoleAddResponse         *message);
size_t etcdserverpb__auth_role_add_response__get_packed_size
                     (const Etcdserverpb__AuthRoleAddResponse   *message);
size_t etcdserverpb__auth_role_add_response__pack
                     (const Etcdserverpb__AuthRoleAddResponse   *message,
                      uint8_t             *out);
size_t etcdserverpb__auth_role_add_response__pack_to_buffer
                     (const Etcdserverpb__AuthRoleAddResponse   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__AuthRoleAddResponse *
       etcdserverpb__auth_role_add_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__auth_role_add_response__free_unpacked
                     (Etcdserverpb__AuthRoleAddResponse *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__AuthRoleGetResponse methods */
void   etcdserverpb__auth_role_get_response__init
                     (Etcdserverpb__AuthRoleGetResponse         *message);
size_t etcdserverpb__auth_role_get_response__get_packed_size
                     (const Etcdserverpb__AuthRoleGetResponse   *message);
size_t etcdserverpb__auth_role_get_response__pack
                     (const Etcdserverpb__AuthRoleGetResponse   *message,
                      uint8_t             *out);
size_t etcdserverpb__auth_role_get_response__pack_to_buffer
                     (const Etcdserverpb__AuthRoleGetResponse   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__AuthRoleGetResponse *
       etcdserverpb__auth_role_get_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__auth_role_get_response__free_unpacked
                     (Etcdserverpb__AuthRoleGetResponse *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__AuthRoleDeleteResponse methods */
void   etcdserverpb__auth_role_delete_response__init
                     (Etcdserverpb__AuthRoleDeleteResponse         *message);
size_t etcdserverpb__auth_role_delete_response__get_packed_size
                     (const Etcdserverpb__AuthRoleDeleteResponse   *message);
size_t etcdserverpb__auth_role_delete_response__pack
                     (const Etcdserverpb__AuthRoleDeleteResponse   *message,
                      uint8_t             *out);
size_t etcdserverpb__auth_role_delete_response__pack_to_buffer
                     (const Etcdserverpb__AuthRoleDeleteResponse   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__AuthRoleDeleteResponse *
       etcdserverpb__auth_role_delete_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__auth_role_delete_response__free_unpacked
                     (Etcdserverpb__AuthRoleDeleteResponse *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__AuthRoleGrantResponse methods */
void   etcdserverpb__auth_role_grant_response__init
                     (Etcdserverpb__AuthRoleGrantResponse         *message);
size_t etcdserverpb__auth_role_grant_response__get_packed_size
                     (const Etcdserverpb__AuthRoleGrantResponse   *message);
size_t etcdserverpb__auth_role_grant_response__pack
                     (const Etcdserverpb__AuthRoleGrantResponse   *message,
                      uint8_t             *out);
size_t etcdserverpb__auth_role_grant_response__pack_to_buffer
                     (const Etcdserverpb__AuthRoleGrantResponse   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__AuthRoleGrantResponse *
       etcdserverpb__auth_role_grant_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__auth_role_grant_response__free_unpacked
                     (Etcdserverpb__AuthRoleGrantResponse *message,
                      ProtobufCAllocator *allocator);
/* Etcdserverpb__AuthRoleRevokePermissionResponse methods */
void   etcdserverpb__auth_role_revoke_permission_response__init
                     (Etcdserverpb__AuthRoleRevokePermissionResponse         *message);
size_t etcdserverpb__auth_role_revoke_permission_response__get_packed_size
                     (const Etcdserverpb__AuthRoleRevokePermissionResponse   *message);
size_t etcdserverpb__auth_role_revoke_permission_response__pack
                     (const Etcdserverpb__AuthRoleRevokePermissionResponse   *message,
                      uint8_t             *out);
size_t etcdserverpb__auth_role_revoke_permission_response__pack_to_buffer
                     (const Etcdserverpb__AuthRoleRevokePermissionResponse   *message,
                      ProtobufCBuffer     *buffer);
Etcdserverpb__AuthRoleRevokePermissionResponse *
       etcdserverpb__auth_role_revoke_permission_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   etcdserverpb__auth_role_revoke_permission_response__free_unpacked
                     (Etcdserverpb__AuthRoleRevokePermissionResponse *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Etcdserverpb__ResponseHeader_Closure)
                 (const Etcdserverpb__ResponseHeader *message,
                  void *closure_data);
typedef void (*Etcdserverpb__RangeRequest_Closure)
                 (const Etcdserverpb__RangeRequest *message,
                  void *closure_data);
typedef void (*Etcdserverpb__RangeResponse_Closure)
                 (const Etcdserverpb__RangeResponse *message,
                  void *closure_data);
typedef void (*Etcdserverpb__PutRequest_Closure)
                 (const Etcdserverpb__PutRequest *message,
                  void *closure_data);
typedef void (*Etcdserverpb__PutResponse_Closure)
                 (const Etcdserverpb__PutResponse *message,
                  void *closure_data);
typedef void (*Etcdserverpb__DeleteRangeRequest_Closure)
                 (const Etcdserverpb__DeleteRangeRequest *message,
                  void *closure_data);
typedef void (*Etcdserverpb__DeleteRangeResponse_Closure)
                 (const Etcdserverpb__DeleteRangeResponse *message,
                  void *closure_data);
typedef void (*Etcdserverpb__RequestUnion_Closure)
                 (const Etcdserverpb__RequestUnion *message,
                  void *closure_data);
typedef void (*Etcdserverpb__ResponseUnion_Closure)
                 (const Etcdserverpb__ResponseUnion *message,
                  void *closure_data);
typedef void (*Etcdserverpb__Compare_Closure)
                 (const Etcdserverpb__Compare *message,
                  void *closure_data);
typedef void (*Etcdserverpb__TxnRequest_Closure)
                 (const Etcdserverpb__TxnRequest *message,
                  void *closure_data);
typedef void (*Etcdserverpb__TxnResponse_Closure)
                 (const Etcdserverpb__TxnResponse *message,
                  void *closure_data);
typedef void (*Etcdserverpb__CompactionRequest_Closure)
                 (const Etcdserverpb__CompactionRequest *message,
                  void *closure_data);
typedef void (*Etcdserverpb__CompactionResponse_Closure)
                 (const Etcdserverpb__CompactionResponse *message,
                  void *closure_data);
typedef void (*Etcdserverpb__HashRequest_Closure)
                 (const Etcdserverpb__HashRequest *message,
                  void *closure_data);
typedef void (*Etcdserverpb__HashResponse_Closure)
                 (const Etcdserverpb__HashResponse *message,
                  void *closure_data);
typedef void (*Etcdserverpb__SnapshotRequest_Closure)
                 (const Etcdserverpb__SnapshotRequest *message,
                  void *closure_data);
typedef void (*Etcdserverpb__SnapshotResponse_Closure)
                 (const Etcdserverpb__SnapshotResponse *message,
                  void *closure_data);
typedef void (*Etcdserverpb__WatchRequest_Closure)
                 (const Etcdserverpb__WatchRequest *message,
                  void *closure_data);
typedef void (*Etcdserverpb__WatchCreateRequest_Closure)
                 (const Etcdserverpb__WatchCreateRequest *message,
                  void *closure_data);
typedef void (*Etcdserverpb__WatchCancelRequest_Closure)
                 (const Etcdserverpb__WatchCancelRequest *message,
                  void *closure_data);
typedef void (*Etcdserverpb__WatchResponse_Closure)
                 (const Etcdserverpb__WatchResponse *message,
                  void *closure_data);
typedef void (*Etcdserverpb__LeaseGrantRequest_Closure)
                 (const Etcdserverpb__LeaseGrantRequest *message,
                  void *closure_data);
typedef void (*Etcdserverpb__LeaseGrantResponse_Closure)
                 (const Etcdserverpb__LeaseGrantResponse *message,
                  void *closure_data);
typedef void (*Etcdserverpb__LeaseRevokeRequest_Closure)
                 (const Etcdserverpb__LeaseRevokeRequest *message,
                  void *closure_data);
typedef void (*Etcdserverpb__LeaseRevokeResponse_Closure)
                 (const Etcdserverpb__LeaseRevokeResponse *message,
                  void *closure_data);
typedef void (*Etcdserverpb__LeaseKeepAliveRequest_Closure)
                 (const Etcdserverpb__LeaseKeepAliveRequest *message,
                  void *closure_data);
typedef void (*Etcdserverpb__LeaseKeepAliveResponse_Closure)
                 (const Etcdserverpb__LeaseKeepAliveResponse *message,
                  void *closure_data);
typedef void (*Etcdserverpb__Member_Closure)
                 (const Etcdserverpb__Member *message,
                  void *closure_data);
typedef void (*Etcdserverpb__MemberAddRequest_Closure)
                 (const Etcdserverpb__MemberAddRequest *message,
                  void *closure_data);
typedef void (*Etcdserverpb__MemberAddResponse_Closure)
                 (const Etcdserverpb__MemberAddResponse *message,
                  void *closure_data);
typedef void (*Etcdserverpb__MemberRemoveRequest_Closure)
                 (const Etcdserverpb__MemberRemoveRequest *message,
                  void *closure_data);
typedef void (*Etcdserverpb__MemberRemoveResponse_Closure)
                 (const Etcdserverpb__MemberRemoveResponse *message,
                  void *closure_data);
typedef void (*Etcdserverpb__MemberUpdateRequest_Closure)
                 (const Etcdserverpb__MemberUpdateRequest *message,
                  void *closure_data);
typedef void (*Etcdserverpb__MemberUpdateResponse_Closure)
                 (const Etcdserverpb__MemberUpdateResponse *message,
                  void *closure_data);
typedef void (*Etcdserverpb__MemberListRequest_Closure)
                 (const Etcdserverpb__MemberListRequest *message,
                  void *closure_data);
typedef void (*Etcdserverpb__MemberListResponse_Closure)
                 (const Etcdserverpb__MemberListResponse *message,
                  void *closure_data);
typedef void (*Etcdserverpb__DefragmentRequest_Closure)
                 (const Etcdserverpb__DefragmentRequest *message,
                  void *closure_data);
typedef void (*Etcdserverpb__DefragmentResponse_Closure)
                 (const Etcdserverpb__DefragmentResponse *message,
                  void *closure_data);
typedef void (*Etcdserverpb__AlarmRequest_Closure)
                 (const Etcdserverpb__AlarmRequest *message,
                  void *closure_data);
typedef void (*Etcdserverpb__AlarmMember_Closure)
                 (const Etcdserverpb__AlarmMember *message,
                  void *closure_data);
typedef void (*Etcdserverpb__AlarmResponse_Closure)
                 (const Etcdserverpb__AlarmResponse *message,
                  void *closure_data);
typedef void (*Etcdserverpb__StatusRequest_Closure)
                 (const Etcdserverpb__StatusRequest *message,
                  void *closure_data);
typedef void (*Etcdserverpb__StatusResponse_Closure)
                 (const Etcdserverpb__StatusResponse *message,
                  void *closure_data);
typedef void (*Etcdserverpb__AuthEnableRequest_Closure)
                 (const Etcdserverpb__AuthEnableRequest *message,
                  void *closure_data);
typedef void (*Etcdserverpb__AuthDisableRequest_Closure)
                 (const Etcdserverpb__AuthDisableRequest *message,
                  void *closure_data);
typedef void (*Etcdserverpb__AuthenticateRequest_Closure)
                 (const Etcdserverpb__AuthenticateRequest *message,
                  void *closure_data);
typedef void (*Etcdserverpb__AuthUserAddRequest_Closure)
                 (const Etcdserverpb__AuthUserAddRequest *message,
                  void *closure_data);
typedef void (*Etcdserverpb__AuthUserGetRequest_Closure)
                 (const Etcdserverpb__AuthUserGetRequest *message,
                  void *closure_data);
typedef void (*Etcdserverpb__AuthUserDeleteRequest_Closure)
                 (const Etcdserverpb__AuthUserDeleteRequest *message,
                  void *closure_data);
typedef void (*Etcdserverpb__AuthUserChangePasswordRequest_Closure)
                 (const Etcdserverpb__AuthUserChangePasswordRequest *message,
                  void *closure_data);
typedef void (*Etcdserverpb__AuthUserGrantRequest_Closure)
                 (const Etcdserverpb__AuthUserGrantRequest *message,
                  void *closure_data);
typedef void (*Etcdserverpb__AuthUserRevokeRoleRequest_Closure)
                 (const Etcdserverpb__AuthUserRevokeRoleRequest *message,
                  void *closure_data);
typedef void (*Etcdserverpb__AuthRoleAddRequest_Closure)
                 (const Etcdserverpb__AuthRoleAddRequest *message,
                  void *closure_data);
typedef void (*Etcdserverpb__AuthRoleGetRequest_Closure)
                 (const Etcdserverpb__AuthRoleGetRequest *message,
                  void *closure_data);
typedef void (*Etcdserverpb__AuthRoleDeleteRequest_Closure)
                 (const Etcdserverpb__AuthRoleDeleteRequest *message,
                  void *closure_data);
typedef void (*Etcdserverpb__AuthRoleGrantRequest_Closure)
                 (const Etcdserverpb__AuthRoleGrantRequest *message,
                  void *closure_data);
typedef void (*Etcdserverpb__AuthRoleRevokePermissionRequest_Closure)
                 (const Etcdserverpb__AuthRoleRevokePermissionRequest *message,
                  void *closure_data);
typedef void (*Etcdserverpb__AuthEnableResponse_Closure)
                 (const Etcdserverpb__AuthEnableResponse *message,
                  void *closure_data);
typedef void (*Etcdserverpb__AuthDisableResponse_Closure)
                 (const Etcdserverpb__AuthDisableResponse *message,
                  void *closure_data);
typedef void (*Etcdserverpb__AuthenticateResponse_Closure)
                 (const Etcdserverpb__AuthenticateResponse *message,
                  void *closure_data);
typedef void (*Etcdserverpb__AuthUserAddResponse_Closure)
                 (const Etcdserverpb__AuthUserAddResponse *message,
                  void *closure_data);
typedef void (*Etcdserverpb__AuthUserGetResponse_Closure)
                 (const Etcdserverpb__AuthUserGetResponse *message,
                  void *closure_data);
typedef void (*Etcdserverpb__AuthUserDeleteResponse_Closure)
                 (const Etcdserverpb__AuthUserDeleteResponse *message,
                  void *closure_data);
typedef void (*Etcdserverpb__AuthUserChangePasswordResponse_Closure)
                 (const Etcdserverpb__AuthUserChangePasswordResponse *message,
                  void *closure_data);
typedef void (*Etcdserverpb__AuthUserGrantResponse_Closure)
                 (const Etcdserverpb__AuthUserGrantResponse *message,
                  void *closure_data);
typedef void (*Etcdserverpb__AuthUserRevokeRoleResponse_Closure)
                 (const Etcdserverpb__AuthUserRevokeRoleResponse *message,
                  void *closure_data);
typedef void (*Etcdserverpb__AuthRoleAddResponse_Closure)
                 (const Etcdserverpb__AuthRoleAddResponse *message,
                  void *closure_data);
typedef void (*Etcdserverpb__AuthRoleGetResponse_Closure)
                 (const Etcdserverpb__AuthRoleGetResponse *message,
                  void *closure_data);
typedef void (*Etcdserverpb__AuthRoleDeleteResponse_Closure)
                 (const Etcdserverpb__AuthRoleDeleteResponse *message,
                  void *closure_data);
typedef void (*Etcdserverpb__AuthRoleGrantResponse_Closure)
                 (const Etcdserverpb__AuthRoleGrantResponse *message,
                  void *closure_data);
typedef void (*Etcdserverpb__AuthRoleRevokePermissionResponse_Closure)
                 (const Etcdserverpb__AuthRoleRevokePermissionResponse *message,
                  void *closure_data);

/* --- services --- */

typedef struct _Etcdserverpb__KV_Service Etcdserverpb__KV_Service;
struct _Etcdserverpb__KV_Service
{
  ProtobufCService base;
  void (*range)(Etcdserverpb__KV_Service *service,
                const Etcdserverpb__RangeRequest *input,
                Etcdserverpb__RangeResponse_Closure closure,
                void *closure_data);
  void (*put)(Etcdserverpb__KV_Service *service,
              const Etcdserverpb__PutRequest *input,
              Etcdserverpb__PutResponse_Closure closure,
              void *closure_data);
  void (*delete_range)(Etcdserverpb__KV_Service *service,
                       const Etcdserverpb__DeleteRangeRequest *input,
                       Etcdserverpb__DeleteRangeResponse_Closure closure,
                       void *closure_data);
  void (*txn)(Etcdserverpb__KV_Service *service,
              const Etcdserverpb__TxnRequest *input,
              Etcdserverpb__TxnResponse_Closure closure,
              void *closure_data);
  void (*compact)(Etcdserverpb__KV_Service *service,
                  const Etcdserverpb__CompactionRequest *input,
                  Etcdserverpb__CompactionResponse_Closure closure,
                  void *closure_data);
};
typedef void (*Etcdserverpb__KV_ServiceDestroy)(Etcdserverpb__KV_Service *);
void etcdserverpb__kv__init (Etcdserverpb__KV_Service *service,
                             Etcdserverpb__KV_ServiceDestroy destroy);
#define ETCDSERVERPB__KV__BASE_INIT \
    { &etcdserverpb__kv__descriptor, protobuf_c_service_invoke_internal, NULL }
#define ETCDSERVERPB__KV__INIT(function_prefix__) \
    { ETCDSERVERPB__KV__BASE_INIT,\
      function_prefix__ ## range,\
      function_prefix__ ## put,\
      function_prefix__ ## delete_range,\
      function_prefix__ ## txn,\
      function_prefix__ ## compact  }
void etcdserverpb__kv__range(ProtobufCService *service,
                             const Etcdserverpb__RangeRequest *input,
                             Etcdserverpb__RangeResponse_Closure closure,
                             void *closure_data);
void etcdserverpb__kv__put(ProtobufCService *service,
                           const Etcdserverpb__PutRequest *input,
                           Etcdserverpb__PutResponse_Closure closure,
                           void *closure_data);
void etcdserverpb__kv__delete_range(ProtobufCService *service,
                                    const Etcdserverpb__DeleteRangeRequest *input,
                                    Etcdserverpb__DeleteRangeResponse_Closure closure,
                                    void *closure_data);
void etcdserverpb__kv__txn(ProtobufCService *service,
                           const Etcdserverpb__TxnRequest *input,
                           Etcdserverpb__TxnResponse_Closure closure,
                           void *closure_data);
void etcdserverpb__kv__compact(ProtobufCService *service,
                               const Etcdserverpb__CompactionRequest *input,
                               Etcdserverpb__CompactionResponse_Closure closure,
                               void *closure_data);
typedef struct _Etcdserverpb__Watch_Service Etcdserverpb__Watch_Service;
struct _Etcdserverpb__Watch_Service
{
  ProtobufCService base;
  void (*watch)(Etcdserverpb__Watch_Service *service,
                const Etcdserverpb__WatchRequest *input,
                Etcdserverpb__WatchResponse_Closure closure,
                void *closure_data);
};
typedef void (*Etcdserverpb__Watch_ServiceDestroy)(Etcdserverpb__Watch_Service *);
void etcdserverpb__watch__init (Etcdserverpb__Watch_Service *service,
                                Etcdserverpb__Watch_ServiceDestroy destroy);
#define ETCDSERVERPB__WATCH__BASE_INIT \
    { &etcdserverpb__watch__descriptor, protobuf_c_service_invoke_internal, NULL }
#define ETCDSERVERPB__WATCH__INIT(function_prefix__) \
    { ETCDSERVERPB__WATCH__BASE_INIT,\
      function_prefix__ ## watch  }
void etcdserverpb__watch__watch(ProtobufCService *service,
                                const Etcdserverpb__WatchRequest *input,
                                Etcdserverpb__WatchResponse_Closure closure,
                                void *closure_data);
typedef struct _Etcdserverpb__Lease_Service Etcdserverpb__Lease_Service;
struct _Etcdserverpb__Lease_Service
{
  ProtobufCService base;
  void (*lease_grant)(Etcdserverpb__Lease_Service *service,
                      const Etcdserverpb__LeaseGrantRequest *input,
                      Etcdserverpb__LeaseGrantResponse_Closure closure,
                      void *closure_data);
  void (*lease_revoke)(Etcdserverpb__Lease_Service *service,
                       const Etcdserverpb__LeaseRevokeRequest *input,
                       Etcdserverpb__LeaseRevokeResponse_Closure closure,
                       void *closure_data);
  void (*lease_keep_alive)(Etcdserverpb__Lease_Service *service,
                           const Etcdserverpb__LeaseKeepAliveRequest *input,
                           Etcdserverpb__LeaseKeepAliveResponse_Closure closure,
                           void *closure_data);
};
typedef void (*Etcdserverpb__Lease_ServiceDestroy)(Etcdserverpb__Lease_Service *);
void etcdserverpb__lease__init (Etcdserverpb__Lease_Service *service,
                                Etcdserverpb__Lease_ServiceDestroy destroy);
#define ETCDSERVERPB__LEASE__BASE_INIT \
    { &etcdserverpb__lease__descriptor, protobuf_c_service_invoke_internal, NULL }
#define ETCDSERVERPB__LEASE__INIT(function_prefix__) \
    { ETCDSERVERPB__LEASE__BASE_INIT,\
      function_prefix__ ## lease_grant,\
      function_prefix__ ## lease_revoke,\
      function_prefix__ ## lease_keep_alive  }
void etcdserverpb__lease__lease_grant(ProtobufCService *service,
                                      const Etcdserverpb__LeaseGrantRequest *input,
                                      Etcdserverpb__LeaseGrantResponse_Closure closure,
                                      void *closure_data);
void etcdserverpb__lease__lease_revoke(ProtobufCService *service,
                                       const Etcdserverpb__LeaseRevokeRequest *input,
                                       Etcdserverpb__LeaseRevokeResponse_Closure closure,
                                       void *closure_data);
void etcdserverpb__lease__lease_keep_alive(ProtobufCService *service,
                                           const Etcdserverpb__LeaseKeepAliveRequest *input,
                                           Etcdserverpb__LeaseKeepAliveResponse_Closure closure,
                                           void *closure_data);
typedef struct _Etcdserverpb__Cluster_Service Etcdserverpb__Cluster_Service;
struct _Etcdserverpb__Cluster_Service
{
  ProtobufCService base;
  void (*member_add)(Etcdserverpb__Cluster_Service *service,
                     const Etcdserverpb__MemberAddRequest *input,
                     Etcdserverpb__MemberAddResponse_Closure closure,
                     void *closure_data);
  void (*member_remove)(Etcdserverpb__Cluster_Service *service,
                        const Etcdserverpb__MemberRemoveRequest *input,
                        Etcdserverpb__MemberRemoveResponse_Closure closure,
                        void *closure_data);
  void (*member_update)(Etcdserverpb__Cluster_Service *service,
                        const Etcdserverpb__MemberUpdateRequest *input,
                        Etcdserverpb__MemberUpdateResponse_Closure closure,
                        void *closure_data);
  void (*member_list)(Etcdserverpb__Cluster_Service *service,
                      const Etcdserverpb__MemberListRequest *input,
                      Etcdserverpb__MemberListResponse_Closure closure,
                      void *closure_data);
};
typedef void (*Etcdserverpb__Cluster_ServiceDestroy)(Etcdserverpb__Cluster_Service *);
void etcdserverpb__cluster__init (Etcdserverpb__Cluster_Service *service,
                                  Etcdserverpb__Cluster_ServiceDestroy destroy);
#define ETCDSERVERPB__CLUSTER__BASE_INIT \
    { &etcdserverpb__cluster__descriptor, protobuf_c_service_invoke_internal, NULL }
#define ETCDSERVERPB__CLUSTER__INIT(function_prefix__) \
    { ETCDSERVERPB__CLUSTER__BASE_INIT,\
      function_prefix__ ## member_add,\
      function_prefix__ ## member_remove,\
      function_prefix__ ## member_update,\
      function_prefix__ ## member_list  }
void etcdserverpb__cluster__member_add(ProtobufCService *service,
                                       const Etcdserverpb__MemberAddRequest *input,
                                       Etcdserverpb__MemberAddResponse_Closure closure,
                                       void *closure_data);
void etcdserverpb__cluster__member_remove(ProtobufCService *service,
                                          const Etcdserverpb__MemberRemoveRequest *input,
                                          Etcdserverpb__MemberRemoveResponse_Closure closure,
                                          void *closure_data);
void etcdserverpb__cluster__member_update(ProtobufCService *service,
                                          const Etcdserverpb__MemberUpdateRequest *input,
                                          Etcdserverpb__MemberUpdateResponse_Closure closure,
                                          void *closure_data);
void etcdserverpb__cluster__member_list(ProtobufCService *service,
                                        const Etcdserverpb__MemberListRequest *input,
                                        Etcdserverpb__MemberListResponse_Closure closure,
                                        void *closure_data);
typedef struct _Etcdserverpb__Maintenance_Service Etcdserverpb__Maintenance_Service;
struct _Etcdserverpb__Maintenance_Service
{
  ProtobufCService base;
  void (*alarm)(Etcdserverpb__Maintenance_Service *service,
                const Etcdserverpb__AlarmRequest *input,
                Etcdserverpb__AlarmResponse_Closure closure,
                void *closure_data);
  void (*status)(Etcdserverpb__Maintenance_Service *service,
                 const Etcdserverpb__StatusRequest *input,
                 Etcdserverpb__StatusResponse_Closure closure,
                 void *closure_data);
  void (*defragment)(Etcdserverpb__Maintenance_Service *service,
                     const Etcdserverpb__DefragmentRequest *input,
                     Etcdserverpb__DefragmentResponse_Closure closure,
                     void *closure_data);
  void (*hash)(Etcdserverpb__Maintenance_Service *service,
               const Etcdserverpb__HashRequest *input,
               Etcdserverpb__HashResponse_Closure closure,
               void *closure_data);
  void (*snapshot)(Etcdserverpb__Maintenance_Service *service,
                   const Etcdserverpb__SnapshotRequest *input,
                   Etcdserverpb__SnapshotResponse_Closure closure,
                   void *closure_data);
};
typedef void (*Etcdserverpb__Maintenance_ServiceDestroy)(Etcdserverpb__Maintenance_Service *);
void etcdserverpb__maintenance__init (Etcdserverpb__Maintenance_Service *service,
                                      Etcdserverpb__Maintenance_ServiceDestroy destroy);
#define ETCDSERVERPB__MAINTENANCE__BASE_INIT \
    { &etcdserverpb__maintenance__descriptor, protobuf_c_service_invoke_internal, NULL }
#define ETCDSERVERPB__MAINTENANCE__INIT(function_prefix__) \
    { ETCDSERVERPB__MAINTENANCE__BASE_INIT,\
      function_prefix__ ## alarm,\
      function_prefix__ ## status,\
      function_prefix__ ## defragment,\
      function_prefix__ ## hash,\
      function_prefix__ ## snapshot  }
void etcdserverpb__maintenance__alarm(ProtobufCService *service,
                                      const Etcdserverpb__AlarmRequest *input,
                                      Etcdserverpb__AlarmResponse_Closure closure,
                                      void *closure_data);
void etcdserverpb__maintenance__status(ProtobufCService *service,
                                       const Etcdserverpb__StatusRequest *input,
                                       Etcdserverpb__StatusResponse_Closure closure,
                                       void *closure_data);
void etcdserverpb__maintenance__defragment(ProtobufCService *service,
                                           const Etcdserverpb__DefragmentRequest *input,
                                           Etcdserverpb__DefragmentResponse_Closure closure,
                                           void *closure_data);
void etcdserverpb__maintenance__hash(ProtobufCService *service,
                                     const Etcdserverpb__HashRequest *input,
                                     Etcdserverpb__HashResponse_Closure closure,
                                     void *closure_data);
void etcdserverpb__maintenance__snapshot(ProtobufCService *service,
                                         const Etcdserverpb__SnapshotRequest *input,
                                         Etcdserverpb__SnapshotResponse_Closure closure,
                                         void *closure_data);
typedef struct _Etcdserverpb__Auth_Service Etcdserverpb__Auth_Service;
struct _Etcdserverpb__Auth_Service
{
  ProtobufCService base;
  void (*auth_enable)(Etcdserverpb__Auth_Service *service,
                      const Etcdserverpb__AuthEnableRequest *input,
                      Etcdserverpb__AuthEnableResponse_Closure closure,
                      void *closure_data);
  void (*auth_disable)(Etcdserverpb__Auth_Service *service,
                       const Etcdserverpb__AuthDisableRequest *input,
                       Etcdserverpb__AuthDisableResponse_Closure closure,
                       void *closure_data);
  void (*authenticate)(Etcdserverpb__Auth_Service *service,
                       const Etcdserverpb__AuthenticateRequest *input,
                       Etcdserverpb__AuthenticateResponse_Closure closure,
                       void *closure_data);
  void (*user_add)(Etcdserverpb__Auth_Service *service,
                   const Etcdserverpb__AuthUserAddRequest *input,
                   Etcdserverpb__AuthUserAddResponse_Closure closure,
                   void *closure_data);
  void (*user_get)(Etcdserverpb__Auth_Service *service,
                   const Etcdserverpb__AuthUserGetRequest *input,
                   Etcdserverpb__AuthUserGetResponse_Closure closure,
                   void *closure_data);
  void (*user_delete)(Etcdserverpb__Auth_Service *service,
                      const Etcdserverpb__AuthUserDeleteRequest *input,
                      Etcdserverpb__AuthUserDeleteResponse_Closure closure,
                      void *closure_data);
  void (*user_change_password)(Etcdserverpb__Auth_Service *service,
                               const Etcdserverpb__AuthUserChangePasswordRequest *input,
                               Etcdserverpb__AuthUserChangePasswordResponse_Closure closure,
                               void *closure_data);
  void (*user_grant)(Etcdserverpb__Auth_Service *service,
                     const Etcdserverpb__AuthUserGrantRequest *input,
                     Etcdserverpb__AuthUserGrantResponse_Closure closure,
                     void *closure_data);
  void (*user_revoke_role)(Etcdserverpb__Auth_Service *service,
                           const Etcdserverpb__AuthUserRevokeRoleRequest *input,
                           Etcdserverpb__AuthUserRevokeRoleResponse_Closure closure,
                           void *closure_data);
  void (*role_add)(Etcdserverpb__Auth_Service *service,
                   const Etcdserverpb__AuthRoleAddRequest *input,
                   Etcdserverpb__AuthRoleAddResponse_Closure closure,
                   void *closure_data);
  void (*role_get)(Etcdserverpb__Auth_Service *service,
                   const Etcdserverpb__AuthRoleGetRequest *input,
                   Etcdserverpb__AuthRoleGetResponse_Closure closure,
                   void *closure_data);
  void (*role_delete)(Etcdserverpb__Auth_Service *service,
                      const Etcdserverpb__AuthRoleDeleteRequest *input,
                      Etcdserverpb__AuthRoleDeleteResponse_Closure closure,
                      void *closure_data);
  void (*role_grant)(Etcdserverpb__Auth_Service *service,
                     const Etcdserverpb__AuthRoleGrantRequest *input,
                     Etcdserverpb__AuthRoleGrantResponse_Closure closure,
                     void *closure_data);
  void (*role_revoke_permission)(Etcdserverpb__Auth_Service *service,
                                 const Etcdserverpb__AuthRoleRevokePermissionRequest *input,
                                 Etcdserverpb__AuthRoleRevokePermissionResponse_Closure closure,
                                 void *closure_data);
};
typedef void (*Etcdserverpb__Auth_ServiceDestroy)(Etcdserverpb__Auth_Service *);
void etcdserverpb__auth__init (Etcdserverpb__Auth_Service *service,
                               Etcdserverpb__Auth_ServiceDestroy destroy);
#define ETCDSERVERPB__AUTH__BASE_INIT \
    { &etcdserverpb__auth__descriptor, protobuf_c_service_invoke_internal, NULL }
#define ETCDSERVERPB__AUTH__INIT(function_prefix__) \
    { ETCDSERVERPB__AUTH__BASE_INIT,\
      function_prefix__ ## auth_enable,\
      function_prefix__ ## auth_disable,\
      function_prefix__ ## authenticate,\
      function_prefix__ ## user_add,\
      function_prefix__ ## user_get,\
      function_prefix__ ## user_delete,\
      function_prefix__ ## user_change_password,\
      function_prefix__ ## user_grant,\
      function_prefix__ ## user_revoke_role,\
      function_prefix__ ## role_add,\
      function_prefix__ ## role_get,\
      function_prefix__ ## role_delete,\
      function_prefix__ ## role_grant,\
      function_prefix__ ## role_revoke_permission  }
void etcdserverpb__auth__auth_enable(ProtobufCService *service,
                                     const Etcdserverpb__AuthEnableRequest *input,
                                     Etcdserverpb__AuthEnableResponse_Closure closure,
                                     void *closure_data);
void etcdserverpb__auth__auth_disable(ProtobufCService *service,
                                      const Etcdserverpb__AuthDisableRequest *input,
                                      Etcdserverpb__AuthDisableResponse_Closure closure,
                                      void *closure_data);
void etcdserverpb__auth__authenticate(ProtobufCService *service,
                                      const Etcdserverpb__AuthenticateRequest *input,
                                      Etcdserverpb__AuthenticateResponse_Closure closure,
                                      void *closure_data);
void etcdserverpb__auth__user_add(ProtobufCService *service,
                                  const Etcdserverpb__AuthUserAddRequest *input,
                                  Etcdserverpb__AuthUserAddResponse_Closure closure,
                                  void *closure_data);
void etcdserverpb__auth__user_get(ProtobufCService *service,
                                  const Etcdserverpb__AuthUserGetRequest *input,
                                  Etcdserverpb__AuthUserGetResponse_Closure closure,
                                  void *closure_data);
void etcdserverpb__auth__user_delete(ProtobufCService *service,
                                     const Etcdserverpb__AuthUserDeleteRequest *input,
                                     Etcdserverpb__AuthUserDeleteResponse_Closure closure,
                                     void *closure_data);
void etcdserverpb__auth__user_change_password(ProtobufCService *service,
                                              const Etcdserverpb__AuthUserChangePasswordRequest *input,
                                              Etcdserverpb__AuthUserChangePasswordResponse_Closure closure,
                                              void *closure_data);
void etcdserverpb__auth__user_grant(ProtobufCService *service,
                                    const Etcdserverpb__AuthUserGrantRequest *input,
                                    Etcdserverpb__AuthUserGrantResponse_Closure closure,
                                    void *closure_data);
void etcdserverpb__auth__user_revoke_role(ProtobufCService *service,
                                          const Etcdserverpb__AuthUserRevokeRoleRequest *input,
                                          Etcdserverpb__AuthUserRevokeRoleResponse_Closure closure,
                                          void *closure_data);
void etcdserverpb__auth__role_add(ProtobufCService *service,
                                  const Etcdserverpb__AuthRoleAddRequest *input,
                                  Etcdserverpb__AuthRoleAddResponse_Closure closure,
                                  void *closure_data);
void etcdserverpb__auth__role_get(ProtobufCService *service,
                                  const Etcdserverpb__AuthRoleGetRequest *input,
                                  Etcdserverpb__AuthRoleGetResponse_Closure closure,
                                  void *closure_data);
void etcdserverpb__auth__role_delete(ProtobufCService *service,
                                     const Etcdserverpb__AuthRoleDeleteRequest *input,
                                     Etcdserverpb__AuthRoleDeleteResponse_Closure closure,
                                     void *closure_data);
void etcdserverpb__auth__role_grant(ProtobufCService *service,
                                    const Etcdserverpb__AuthRoleGrantRequest *input,
                                    Etcdserverpb__AuthRoleGrantResponse_Closure closure,
                                    void *closure_data);
void etcdserverpb__auth__role_revoke_permission(ProtobufCService *service,
                                                const Etcdserverpb__AuthRoleRevokePermissionRequest *input,
                                                Etcdserverpb__AuthRoleRevokePermissionResponse_Closure closure,
                                                void *closure_data);

/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    etcdserverpb__alarm_type__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__response_header__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__range_request__descriptor;
extern const ProtobufCEnumDescriptor    etcdserverpb__range_request__sort_order__descriptor;
extern const ProtobufCEnumDescriptor    etcdserverpb__range_request__sort_target__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__range_response__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__put_request__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__put_response__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__delete_range_request__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__delete_range_response__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__request_union__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__response_union__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__compare__descriptor;
extern const ProtobufCEnumDescriptor    etcdserverpb__compare__compare_result__descriptor;
extern const ProtobufCEnumDescriptor    etcdserverpb__compare__compare_target__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__txn_request__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__txn_response__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__compaction_request__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__compaction_response__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__hash_request__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__hash_response__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__snapshot_request__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__snapshot_response__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__watch_request__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__watch_create_request__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__watch_cancel_request__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__watch_response__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__lease_grant_request__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__lease_grant_response__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__lease_revoke_request__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__lease_revoke_response__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__lease_keep_alive_request__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__lease_keep_alive_response__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__member__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__member_add_request__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__member_add_response__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__member_remove_request__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__member_remove_response__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__member_update_request__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__member_update_response__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__member_list_request__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__member_list_response__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__defragment_request__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__defragment_response__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__alarm_request__descriptor;
extern const ProtobufCEnumDescriptor    etcdserverpb__alarm_request__alarm_action__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__alarm_member__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__alarm_response__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__status_request__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__status_response__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__auth_enable_request__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__auth_disable_request__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__authenticate_request__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__auth_user_add_request__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__auth_user_get_request__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__auth_user_delete_request__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__auth_user_change_password_request__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__auth_user_grant_request__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__auth_user_revoke_role_request__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__auth_role_add_request__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__auth_role_get_request__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__auth_role_delete_request__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__auth_role_grant_request__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__auth_role_revoke_permission_request__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__auth_enable_response__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__auth_disable_response__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__authenticate_response__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__auth_user_add_response__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__auth_user_get_response__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__auth_user_delete_response__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__auth_user_change_password_response__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__auth_user_grant_response__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__auth_user_revoke_role_response__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__auth_role_add_response__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__auth_role_get_response__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__auth_role_delete_response__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__auth_role_grant_response__descriptor;
extern const ProtobufCMessageDescriptor etcdserverpb__auth_role_revoke_permission_response__descriptor;
extern const ProtobufCServiceDescriptor etcdserverpb__kv__descriptor;
extern const ProtobufCServiceDescriptor etcdserverpb__watch__descriptor;
extern const ProtobufCServiceDescriptor etcdserverpb__lease__descriptor;
extern const ProtobufCServiceDescriptor etcdserverpb__cluster__descriptor;
extern const ProtobufCServiceDescriptor etcdserverpb__maintenance__descriptor;
extern const ProtobufCServiceDescriptor etcdserverpb__auth__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_rpc_2eproto__INCLUDED */
